<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Server on leehack&#39;s blog</title>
    <link>http://blog.leehack.com/tags/server/</link>
    <description>Recent content in Server on leehack&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 09 Dec 2011 04:25:00 +0000</lastBuildDate>
    <atom:link href="http://blog.leehack.com/tags/server/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Python으로 c2dm server 만들기</title>
      <link>http://blog.leehack.com/blog/2011/12/09/python%EC%9C%BC%EB%A1%9C-c2dm-server-%EB%A7%8C%EB%93%A4%EA%B8%B0/</link>
      <pubDate>Fri, 09 Dec 2011 04:25:00 +0000</pubDate>
      
      <guid>http://blog.leehack.com/blog/2011/12/09/python%EC%9C%BC%EB%A1%9C-c2dm-server-%EB%A7%8C%EB%93%A4%EA%B8%B0/</guid>
      <description>&lt;p&gt;1.&amp;nbsp;&lt;a href=&#34;http://code.google.com/intl/ko-KR/android/c2dm/&#34;&gt;http://code.google.com/intl/ko-KR/android/c2dm/&lt;/a&gt; 에서 c2dm 서비스에 sign-up&lt;br /&gt;(gmail account를 새로 만들어서 가입하는 것이 좋다. - 실제로 이 account정보를 클라이언트 및 서버에 모두 넣어야 하고 더구나 서버에는 패스워드정보도 필요하기 때문)&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-HdKsVNq8U3Y/TuHWLJiuniI/AAAAAAAADm8/cOUAaTiV7_o/s1600/%25E1%2584%2589%25E1%2585%25B3%25E1%2584%258F%25E1%2585%25B3%25E1%2584%2585%25E1%2585%25B5%25E1%2586%25AB%25E1%2584%2589%25E1%2585%25A3%25E1%2586%25BA+2011-12-09+%25E1%2584%258B%25E1%2585%25A9%25E1%2584%2592%25E1%2585%25AE+6.33.53.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;336&#34; src=&#34;http://4.bp.blogspot.com/-HdKsVNq8U3Y/TuHWLJiuniI/AAAAAAAADm8/cOUAaTiV7_o/s640/%25E1%2584%2589%25E1%2585%25B3%25E1%2584%258F%25E1%2585%25B3%25E1%2584%2585%25E1%2585%25B5%25E1%2586%25AB%25E1%2584%2589%25E1%2585%25A3%25E1%2586%25BA+2011-12-09+%25E1%2584%258B%25E1%2585%25A9%25E1%2584%2592%25E1%2585%25AE+6.33.53.png&#34; width=&#34;640&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;2. 가입하면 E-mail로 가입한 Account로 서비스가 Enable되었다는 내용의 메일이 옮(보통 하루안에 오고 늦어도 몇일 사이에는 오는 듯)&lt;br /&gt;&lt;br /&gt;여기까지 준비 완료! 아래는 실제 파이썬 코드 시작!!&lt;br /&gt;&lt;br /&gt;&lt;pre class=&#34;brush:python&#34;&gt;import urllib, urllib2&lt;br /&gt;&lt;br /&gt;class ClientLoginTokenFactory(): &lt;br /&gt;    _token = None &lt;br /&gt;    &lt;br /&gt;    def &lt;strong&gt;init&lt;/strong&gt;(self):&lt;br /&gt;        self.url = &amp;lsquo;&lt;a href=&#34;https://www.google.com/accounts/ClientLogin&#39;&#34;&gt;https://www.google.com/accounts/ClientLogin&#39;&lt;/a&gt;&lt;br /&gt;        self.accountType = &amp;lsquo;GOOGLE&amp;rsquo;&lt;br /&gt;        self.email = &amp;lsquo;c2dm에 가입한 메일주소&amp;rsquo;&lt;br /&gt;        self.password = &amp;lsquo;c2dm에 가입한 메일주소의 패스워드&amp;rsquo;&lt;br /&gt;        self.source = &amp;lsquo;replstory-replstory-0&amp;rsquo;&lt;br /&gt;        self.service = &amp;lsquo;ac2dm&amp;rsquo;&lt;br /&gt;    &lt;br /&gt;    def getToken(self):    &lt;br /&gt;        if self._token is None:&lt;br /&gt;            &lt;br /&gt;            # Build payload&lt;br /&gt;            values = {&amp;lsquo;accountType&amp;rsquo; : self.accountType,&lt;br /&gt;                      &amp;lsquo;Email&amp;rsquo; : self.email,&lt;br /&gt;                      &amp;lsquo;Passwd&amp;rsquo; : self.password, &lt;br /&gt;                      &amp;lsquo;source&amp;rsquo; : self.source, &lt;br /&gt;                      &amp;lsquo;service&amp;rsquo; : self.service}&lt;br /&gt;            &lt;br /&gt;            # Build request&lt;br /&gt;            data = urllib.urlencode(values)&lt;br /&gt;            request = urllib2.Request(self.url, data)&lt;br /&gt;            &lt;br /&gt;            # Post&lt;br /&gt;            response = urllib2.urlopen(request)&lt;br /&gt;            responseAsString = response.read()&lt;br /&gt;            &lt;br /&gt;            # Format response&lt;br /&gt;            responseAsList = responseAsString.split(&amp;rsquo;\n&amp;rsquo;)&lt;br /&gt;            &lt;br /&gt;            self._token = responseAsList[2].split(&amp;lsquo;=&amp;rsquo;)[1]&lt;br /&gt;            &lt;br /&gt;        return self._token&lt;br /&gt;    &lt;br /&gt;class C2DM():&lt;br /&gt;    &lt;br /&gt;    def &lt;strong&gt;init&lt;/strong&gt;(self):&lt;br /&gt;        self.url = &amp;lsquo;&lt;a href=&#34;https://android.apis.google.com/c2dm/send&#39;&#34;&gt;https://android.apis.google.com/c2dm/send&#39;&lt;/a&gt;&lt;br /&gt;        self.clientAuth = None&lt;br /&gt;        self.registrationId = None&lt;br /&gt;        self.collapseKey = None&lt;br /&gt;        self.data = {}&lt;br /&gt;        &lt;br /&gt;    def sendMessage(self):&lt;br /&gt;        if self.registrationId == None or self.collapseKey == None:&lt;br /&gt;            return False&lt;br /&gt;        &lt;br /&gt;        clientAuthFactory = ClientLoginTokenFactory()&lt;br /&gt;        self.clientAuth = clientAuthFactory.getToken()&lt;br /&gt;        &lt;br /&gt;        # Build payload&lt;br /&gt;        values = {&amp;lsquo;registration_id&amp;rsquo; : self.registrationId,&lt;br /&gt;                  &amp;lsquo;collapse_key&amp;rsquo; : self.collapseKey}     &lt;br /&gt;        &lt;br /&gt;        # Loop over any data we want to send&lt;br /&gt;        for k, v in self.data.iteritems():            &lt;br /&gt;            values[&amp;lsquo;data.&amp;rsquo; + k] = v&lt;br /&gt;        &lt;br /&gt;        # Build request&lt;br /&gt;        headers = {&amp;lsquo;Authorization&amp;rsquo;: &amp;lsquo;GoogleLogin auth=&amp;rsquo; + self.clientAuth}        &lt;br /&gt;        data = urllib.urlencode(values)&lt;br /&gt;        request = urllib2.Request(self.url, data, headers)&lt;br /&gt;        &lt;br /&gt;        # Post&lt;br /&gt;        try:&lt;br /&gt;            response = urllib2.urlopen(request)&lt;br /&gt;            responseAsString = response.read()&lt;br /&gt;            &lt;br /&gt;            return responseAsString&lt;br /&gt;        except urllib2.HTTPError, e:&lt;br /&gt;            print &amp;lsquo;HTTPError &amp;rsquo; + str(e)&lt;br /&gt;            &lt;br /&gt;            &lt;br /&gt;sender = C2DM()&lt;br /&gt;sender.registrationId = &amp;lsquo;Android단말기에서 c2dm서버로 부터 받은 고유번호&amp;rsquo;&lt;br /&gt;sender.collapseKey = 1&lt;br /&gt;sender.data = {&amp;lsquo;msg&amp;rsquo;:&amp;lsquo;test&amp;rsquo;}&lt;br /&gt;response = sender.sendMessage()&lt;br /&gt;print response&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;9,10,79 라인의 정보만 바꾸고 실행하면 c2dm등록된 단말기로 test라는 푸시 메세지가 날아간다.&lt;br /&gt;&lt;a href=&#34;http://blog.boxedice.com/2010/10/07/android-push-notifications-tutorial/&#34;&gt;http://blog.boxedice.com/2010/10/07/android-push-notifications-tutorial/&lt;/a&gt;&amp;nbsp;에 있는 예제코드인데 제대로 돌지 않아서 약간의 수정만 했음.&lt;br /&gt;&lt;br /&gt;이미 눈치 채셨겠지만 실제 사용시에는 78라인부터만 따로 가져가서 원하는 곳에 사용하면 된다. collapseKey를 1로 고정해두고 사용하면 c2dm메세지가 동일한 단말에 동일한 메세지를 계속 적으로 보낼 경우 중간중간 빼먹는 경우가 생긴다. 구글에서 중복된 메세지 전송을 방지하게 넣어둔 코드임. 중복으로 보내는 메세지라도 단말에 꼭 전송이 되어야 하는 메세지라면 collapseKey를 increase하면서 보내는 것이 상책!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>