<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>leehack&#39;s blog</title>
    <link>https://blog.leehack.com/</link>
    <description>Recent content on leehack&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 25 Nov 2015 12:37:00 -0500</lastBuildDate>
    <atom:link href="https://blog.leehack.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Hugo 설치하기</title>
      <link>https://blog.leehack.com/blog/2015/11/25/hugo-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0/</link>
      <pubDate>Wed, 25 Nov 2015 12:37:00 -0500</pubDate>
      
      <guid>https://blog.leehack.com/blog/2015/11/25/hugo-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://blog.leehack.com/blog/2015/11/23/블로그-플랫폼을-찾아서../&#34;&gt;블로그 플랫폼을 찾아서&lt;/a&gt;에서 언급한 것처럼 이 블로그는 &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;로 만들었다.
&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;를 설치하기 전에 &lt;a href=&#34;https://jekyllrb.com&#34;&gt;jekyll&lt;/a&gt;이나 &lt;a href=&#34;http://octopress.org&#34;&gt;octopress&lt;/a&gt; 그리고 &lt;a href=&#34;http://haroopress.com&#34;&gt;haroopress&lt;/a&gt;를 알아봤으나 만족스럽지 못했고 빠르고 쉬운 Golang으로 만들어진 &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;를 선택했다.&lt;/p&gt;

&lt;p&gt;아직 &lt;a href=&#34;https://jekyllrb.com&#34;&gt;Jekyll&lt;/a&gt;만큼 커뮤니티가 활성화 되어있지 않고 아주 널리 쓰이고 있지는 않기 때문에 조금 삽질을 하긴 했지만..
한번 설치를 하고 나서는 모든게 꽤나 만족스러웠다. 전반적으로 &lt;a href=&#34;https://jekyllrb.com&#34;&gt;Jekyll&lt;/a&gt;과 닮은 부분이 많기 때문에 기존 &lt;a href=&#34;https://jekyllrb.com&#34;&gt;jekyll&lt;/a&gt;사용자는 어렵지 않게 넘어 올 수 있을 것 같다.&lt;/p&gt;

&lt;p&gt;일단 &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;는 다른 static 기반 시스템처럼 포스팅을 파일로 관리하고 포스팅들과 테마 설정 등을 툴이 알아서 믹싱하여 html베이스의 사이트로 컨버팅 해주는 시스템이다.&lt;/p&gt;

&lt;p&gt;내 경우는 이렇게 사용한다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://ko.wikipedia.org/wiki/%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4&#34;&gt;Markdown&lt;/a&gt;으로 글을 작성.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;로컬에서 작성한 글을 확인.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Git repository에 commit.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;스크립트를 이용해 Github에 Deploy.&lt;br /&gt;
*&lt;em&gt;사실 개발자가 아니고서는 진입장벽이 조금 있는 편이다. 일반 유저라면 기존의 블로깅 시스템처럼 웹사이트에 접속해서 글을 쓰는 편이 편할 수도 있다.&lt;/em&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;설치하기:99a340e556ac96b49661880bbcdb4ef9&#34;&gt;설치하기&lt;/h2&gt;

&lt;h4 id=&#34;mac-유저:99a340e556ac96b49661880bbcdb4ef9&#34;&gt;Mac 유저&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://brew.sh/&#34;&gt;HomeBrew&lt;/a&gt; 설치 (설치가 안 되어있다면).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; 설치.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ brew install hugo
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;windows나-linux등-타-os-유저:99a340e556ac96b49661880bbcdb4ef9&#34;&gt;Windows나 Linux등 타 OS 유저&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; 다운로드 및 설치 : &lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;릴리즈 페이지&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;golang-유저-source-code:99a340e556ac96b49661880bbcdb4ef9&#34;&gt;Golang 유저(Source code)&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;pre&gt;&lt;code&gt;$ go get -u -v github.com/spf13/hugo
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;사이트-만들기:99a340e556ac96b49661880bbcdb4ef9&#34;&gt;사이트 만들기&lt;/h2&gt;

&lt;p&gt;hugo 명령어를 이용해서 기본 사이트를 만든다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new site /path/to/site
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;만들어진 사이트의 구조.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  - archetypes/
  - content/
  - layouts/
  - static/
    config.toml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이제 사이트의 테마를 설치할 단계.&lt;br /&gt;
*&lt;em&gt;기본적으로 아무런 테마가 설치되지 않기 때문에 html로 컨버팅을 해도 아무것도 볼 수 없다&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://themes.gohugo.io/&#34;&gt;Hugo Theme showcase&lt;/a&gt;에서 원하는 테마를 고르고 설치한다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ex) install hyde-x theme.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd your_site_repo/
$ mkdir themes
$ cd themes
$ git clone https://github.com/zyro/hyde-x
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;.git&lt;/code&gt; 관련 파일을 지운다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rm -rf hyde-x/.git
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;config.toml 파일을 열어서 &lt;code&gt;theme = &amp;quot;hyde-x&amp;quot;&lt;/code&gt; 을 추가한다.&lt;br /&gt;
*&lt;em&gt;이 부분은 각 테마 마다 컨픽이 다르니 각 테마의 컨픽 방법 참고&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;새 포스팅 만들기(&lt;code&gt;content/post/first.md&lt;/code&gt;에 파일이 만들어진다)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new post/first.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;만들어진 파일을 열어보면 상단에 아래와 같은 헤더가 먼저 보일 것이다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
categories = []
date = &amp;quot;2015-11-26T09:21:07-05:00&amp;quot;
description = &amp;quot;&amp;quot;
draft = true
keywords = []
title = &amp;quot;first&amp;quot;

+++
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;헤더를 수정하고 &lt;code&gt;+++&lt;/code&gt; 아래 부분에 &lt;a href=&#34;https://ko.wikipedia.org/wiki/%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4&#34;&gt;Markdown&lt;/a&gt;으로 글을 작성하면 된다.&lt;/p&gt;

&lt;p&gt;이제 작성한 글을 확인해 볼 단계.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo serve -w -D
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;위 명령어를 내리면 &lt;code&gt;http://127.0.0.1:1313&lt;/code&gt;에 웹서버가 열리고 브라우저로 접속하면 작성한 내용을 확인 할 수 있다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-w&lt;/code&gt; 옵션을 주면 프로젝트 내에서 수정한 내용이 서버를 재시작하지 않아도 자동으로 적용된다.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-D&lt;/code&gt; 옵션을 주면 &lt;code&gt;draft = true&lt;/code&gt;인 포스팅들까지 랜더링 해준다. (각 포스팅의 헤더 참고)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;작성한 글이나 변경한 설정들이 원하는대로 된 것을 브라우저에서 확인이 되었으면 퍼블리시 단계.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;일단 Ctrl+C로 서버를 종료.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;publish를 원하는 글들의 헤더에서 &lt;code&gt;draft = true&lt;/code&gt; 라인을 제거.&lt;br /&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;public 폴더에 랜더링한 html파일들을 저장.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;public 폴더에 저장된 파일들을 원하는 웹서버에 올리면 된다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;필자의 경우엔 github static page 호스팅을 이용한다. &lt;a href=&#34;blog/2015/11/23/github-static-website-만들기/&#34;&gt;참고&lt;/a&gt;.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/tutorials/github-pages-blog/&#34;&gt;Hosting on GitHub Pages&lt;/a&gt;에 있는 deplay.sh 스크립트를 이용하면 편리하다.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;참조:99a340e556ac96b49661880bbcdb4ef9&#34;&gt;참조&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://gohugo.io/overview/quickstart/&#34;&gt;Hugo Quickstart guide&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to debug Golang with Visual Sutio Code</title>
      <link>https://blog.leehack.com/blog/2015/11/25/how-to-debug-golang-with-visual-sutio-code/</link>
      <pubDate>Wed, 25 Nov 2015 12:36:46 -0500</pubDate>
      
      <guid>https://blog.leehack.com/blog/2015/11/25/how-to-debug-golang-with-visual-sutio-code/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://i3-vso.sec.s-msft.com/dynimg/IC794090.png&#34; alt=&#34;Visual Studio Code&#34; /&gt;
&lt;a href=&#34;https://code.visualstudio.com&#34;&gt;Visual Studio Code&lt;/a&gt; is released by Microsoft which is cross platform Code Editor.
It&amp;rsquo;s forked from &lt;a href=&#34;https://atom.io/&#34;&gt;ATOM&lt;/a&gt; and OpenSource as well if you care ;)&lt;/p&gt;

&lt;p&gt;I just found out it&amp;rsquo;s quite useful for Markdown for my posting but also realized it&amp;rsquo;s quite nice for &lt;a href=&#34;https://golang.org/&#34;&gt;GoLang&lt;/a&gt; debugging as well.
Even still my favorite editor is &lt;a href=&#34;http://www.sublimetext.com/&#34;&gt;SublimeText&lt;/a&gt; though..&lt;/p&gt;

&lt;p&gt;Now it&amp;rsquo;s time to introduce &lt;a href=&#34;https://github.com/derekparker/delve&#34;&gt;Delve&lt;/a&gt;.&lt;br /&gt;
&lt;em&gt;Delve is a debugger for the Go programming language. The goal of the project is to provide a simple, full featured debugging tool for Go. Delve should be easy to invoke and easy to use. Chances are if you&amp;rsquo;re using a debugger, most likely things aren&amp;rsquo;t going your way. With that in mind, Delve should stay out of your way as much as possible.&lt;/em&gt; - from the &lt;a href=&#34;https://github.com/derekparker/delve&#34;&gt;Delve&lt;/a&gt; introduction&lt;/p&gt;

&lt;p&gt;As you might already noticed &lt;a href=&#34;https://code.visualstudio.com&#34;&gt;Visual Studio Code&lt;/a&gt; uses &lt;a href=&#34;https://github.com/derekparker/delve&#34;&gt;Delve&lt;/a&gt; for the debugging.
Actually the GoLang plugin for &lt;a href=&#34;https://code.visualstudio.com&#34;&gt;Visual Studio Code&lt;/a&gt; is not from MicroSoft but you can easily install from the tool.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Install &lt;a href=&#34;https://code.visualstudio.com&#34;&gt;Visual Studio Code&lt;/a&gt; if you don&amp;rsquo;t install yet.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Install &lt;a href=&#34;https://marketplace.visualstudio.com/items/lukehoban.Go&#34;&gt;Go for Visual Studio Code&lt;/a&gt; from &lt;a href=&#34;https://code.visualstudio.com&#34;&gt;Visual Studio Code&lt;/a&gt;.&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl + Shift + P&lt;/code&gt;.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;ext install&lt;/code&gt; &amp;amp; select &lt;code&gt;Install Extension&lt;/code&gt;.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;go&lt;/code&gt; and select Go plugin made by lukehoben.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Install &lt;a href=&#34;https://github.com/derekparker/delve&#34;&gt;Delve&lt;/a&gt;.&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$go get -u github.com/derekparker/delve/cmd/dlv&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;For Linux user, that&amp;rsquo;s it!&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;For Mac user there&amp;rsquo;s something to do. Follow instruction &lt;a href=&#34;http://blog.ralch.com/tutorial/golang-debug-with-delve/&#34;&gt;here&lt;/a&gt;.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Open golang project.&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;File&lt;/code&gt; -&amp;gt; &lt;code&gt;Open folder&lt;/code&gt; -&amp;gt; Select your golang project folder.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Put break point by clicking the line number like any other IDE.&lt;br /&gt;
&lt;img src=&#34;https://lh3.googleusercontent.com/QC_mCv83DzM9xOG8RPPV0raEnyYBrZykp-vb2PnuRbDMQFcsw0U1gJ2V2M5qUKxx-PDsPSDA_rP-aYpz_CxrbAosrTFtxPOBmp7B-jQt-ecHe1a_q2d34qdfvOrgLLQJ-ETiXOk9yMMeaAN0SX4ZKPBWq_YJ2sJxXlGJJDe-P4PMTTDRyMHYkthM7YjsOti9j6ppx5cF4jZJBEb-A03wl1WWZe0RT2VCoBAllaSpHRuVb9977t3Vo-TDH4lZ-D1oMOoXrHEd4O6RZ8xutMzt1wZ9j9GW6t5_0yZEf0rXKyh76LOqAc2QSh_YN2C-oUPbRQBPfkKyTRLj1DkWFJsfgPWIfB7EoLUG4DblaUBpszGueC6lv9BigPJuzRDWnZySoHpVe1kLyageMQsaJOdEZYwEW2qK4glOpkJGI6rWTevVVWb_yi_RZyPf145BJeWef81N6xwc3bLU67fxJ4WZIKBtwTx9TNK1aKvg4MrvRfl-EK-7H-uXCumnnXe8VANNF6zvVWp3F5HRIPs8OJlSR582wToyzX-_zJMN_nPu3t-q=w821-h524-no&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;F5&lt;/code&gt; for start debugging.&lt;br /&gt;
&lt;img src=&#34;https://lh3.googleusercontent.com/s57gVXPYQXwGtIqEsfpItGtuT5P49LXmMs0uClETJHPaB3oDS4ymKG3-HVBENuFQQB0fg9fwDeLoMQ5CB6rc7AbIWR8ph8-TyG4n46lQ8TzrLtpEbJJUPaUFAQmPCxc05wxRl86epsVF764UsatLRUY-4GQ9Fv3zj-FnC3mtnXaisfMhzdXXZ2Nf4IxHY_Kg9FXXqerpd1aN2MJMAL0QYDYmS1O59wKjkMfT-fo4yXcUrdsOSZosDDskQXSxznvLYOZQEqkO_5pQBVyR7K636z0iVt4Uqh1i1b7qTDgJRhfS3E8LI_gxM3FvO0Pt14wVUv_gGAKDX47EHmnaAxlNvTvE8FUKY8_lPSPsNS1XjGfjB_fjCgFc5yzhxswj646PAXo43ocCALUkl1ydzeT95kiuXFDHn8kUIFCN-oNKszG5dydhD-DqBsfSVqYAAe00hbB24iYA6LuxrsAYwnlhdTLQ5CT6rd8tqGw2NvS-oIkc3TmxBIYTM_QuuIJQM3r432P6Yt3URhpLa0cJKOupLdv6iJ5xDJumHAsUBwKl6tRd=w1085-h598-no&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That&amp;rsquo;s it! Very easy!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How I debugged memory leak issue for mediaserver</title>
      <link>https://blog.leehack.com/blog/2015/11/24/how-i-debugged-memory-leak-issue-for-mediaserver/</link>
      <pubDate>Tue, 24 Nov 2015 18:56:44 -0500</pubDate>
      
      <guid>https://blog.leehack.com/blog/2015/11/24/how-i-debugged-memory-leak-issue-for-mediaserver/</guid>
      <description>&lt;p&gt;Recently I had to fix big memory leak issue in &amp;ldquo;medieaserver&amp;rdquo;. From the internet I found very nice tool called &lt;code&gt;addr2func&lt;/code&gt; for fixing the issue.&lt;/p&gt;

&lt;p&gt;The tool is written by &lt;a href=&#34;http://freepine.blogspot.ca/2010/02/analyze-memory-leak-of-android-native.html&#34;&gt;freepine&lt;/a&gt; and I modified for supporting latest version of AOSP bases codes(5.0) and uploaded into Github : &lt;a href=&#34;https://github.com/leehack/addr2func&#34;&gt;addr2func&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Pre-condition - eng or userdebug build of device and android full source code&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Download &lt;a href=&#34;https://raw.githubusercontent.com/leehack/addr2func/master/addr2func.py&#34;&gt;addr2func&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Give excute permission.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$chmod +x addr2func.py
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Enable memory allocation debug feature for &lt;code&gt;mediaserver&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$adb shell setprop libc.debug.malloc 1
$adb shell ps mediaserver
$adb shell kill &amp;lt;mediaserver_pid&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Dump memory status of &lt;code&gt;mediaserver&lt;/code&gt; into &lt;code&gt;dump1&lt;/code&gt; file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$adb shell ps mediaserver
$adb pull /proc/&amp;lt;mediaserver_pid&amp;gt;/maps
$adb shell dumpsys media.player -m &amp;gt; dump1
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Do the memory leak test on the device.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Dump memory status of &lt;code&gt;mediaserver&lt;/code&gt; into &lt;code&gt;dump2&lt;/code&gt; file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$adb pull /proc/&amp;lt;mediaserver_pid&amp;gt;/maps
$adb shell dumpsys media.player -m &amp;gt; dump2
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;make &lt;code&gt;diff&lt;/code&gt; between &lt;code&gt;dump1&lt;/code&gt; and &lt;code&gt;dump2&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$diff dump1 dump2 &amp;gt; diff
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Save memory allocation trace into &lt;code&gt;mem_trace&lt;/code&gt; file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$./addr2func.py --root-dir=&amp;lt;AOSP_dir&amp;gt; --maps-file=maps --product=&amp;lt;product_name_of_your_build&amp;gt; diff &amp;gt; mem_trace
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The memory allocation trace is saved in &lt;code&gt;mem_trace&lt;/code&gt; file. It will show you where exactly the memory is allocated. &lt;code&gt;dup&lt;/code&gt; is duplication count.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Github static website 만들기</title>
      <link>https://blog.leehack.com/blog/2015/11/23/github-static-website-%EB%A7%8C%EB%93%A4%EA%B8%B0/</link>
      <pubDate>Mon, 23 Nov 2015 21:20:51 -0500</pubDate>
      
      <guid>https://blog.leehack.com/blog/2015/11/23/github-static-website-%EB%A7%8C%EB%93%A4%EA%B8%B0/</guid>
      <description>

&lt;h1 id=&#34;github-page란:b47502d0fc5a05431ea07f4e2ccfb4a7&#34;&gt;Github Page란?&lt;/h1&gt;

&lt;p&gt;PHP나 ASP 같은 서버스크립트 베이스의 웹사이트는 올리지 못하더라도 HTML과 Javscript등으로 이루어진 사이트를 호스팅 할 수 있는 서비스.
Github에 repository를 만들고 해당 repository에 index.html을 비롯한 파일들을 올리면 &lt;code&gt;&amp;lt;username&amp;gt;.github.io&lt;/code&gt; URL로 접속이 가능하다.
물론 custom domain을 설정해서 사용할 수도 있다.&lt;/p&gt;

&lt;h1 id=&#34;우선-automatic-generator를-이용해-페이지-만들어보기-user-or-organization-pages-sites:b47502d0fc5a05431ea07f4e2ccfb4a7&#34;&gt;우선 Automatic Generator를 이용해 페이지 만들어보기(User or Organization Pages sites)&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Github 가입하기: &lt;a href=&#34;https://github.com&#34;&gt;Github&lt;/a&gt;에서 가입하면 된다.&lt;/li&gt;
&lt;li&gt;Repository 만들기

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com&#34;&gt;Github&lt;/a&gt;에 로그인 하면 나오는 메인페이지의 우측 상단 &lt;code&gt;+New repository&lt;/code&gt; 버튼을 눌러 새로운 repository만든다.&lt;/li&gt;
&lt;li&gt;repository를 만들때 본인의 &lt;code&gt;&amp;lt;username&amp;gt;.github.io&lt;/code&gt;를 repository 이름으로 설정한다.
&lt;img src=&#34;https://lh3.googleusercontent.com/dS8Dmo1xhiZ-IoXm9VaxoSwxqDMW8o_B759yWUMnRvi3HLYPzxiUXeRNsvHrRhnw-iOtidqDoDxMUG793aj0iRoFFxFR-yL2DLiz0AEgpMGcCbiSMO9ui5IM06JuQaBjhcE-hQOGxWk7xxEqnA1ZUEiZftVC8Htb0O0fhhDfbOLCtg03l92B30dB9sCaWOiDIbT5CjK_1mwWjjezVGjLL1IDmR-2zSCqyHVKwFFFbGG2SKeJlntpBXWb9o6e7L857U0JmTUIyQBrqv5ajM4LIVBjaE8evJKyCStRRVIjYh8evVSsixWNUn3OnsEP8D7tXwp209a5ssWDtG4rscqdii_SZtp4TqWJP190Nbcc66MAcfSl_vgwUxcLBE_wUicjhWCqWhEzI1AFpdieIRxJFERvv6P9UOCh3_Pn5KGetwx47FG4CIwihpnmsK0b8csI-fcIPhMaEWZNLjs122QcMVVQnFavvHkwDdEiIdYQl0L-1qbg2UTFWEKvdiuFM_aVEMZnZsUzSkaDt48QHibAEx-gEorKLCqrsLnsgpvT9g0f=w770-h580-no&#34; alt=&#34;New Repository&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;repository가 만들어진 후 해당 repository의 세팅에 가보면 &lt;code&gt;Github Pages&lt;/code&gt; 옵션에서 &lt;code&gt;Launch automatic page generator&lt;/code&gt;를 클릭하여 웹페이지를 만들 수 있다.
&lt;img src=&#34;https://lh3.googleusercontent.com/TMCslmHpI523-LYvK4utQlt6JlTK4bYiniNJ5UlJjcc0pHj1QL_cZCwQ-xQK_26W8ci9X9SajKIDdEFhy_yeqSZzqD7FKr_5cmvDa_dhHsc1n3FLf1og2XSv6Vs1Z3cBVwD98-sNmzpprRh1Fsy4Wqe0Z_hYOLrelDoMP79rdLGfxBxrtCm4XKW7OGxF8RVgOnqjQCbPfcHwLP-pbkcJAeZMSfkERRaSKJ9g_uuvi-JOiIjRqoByQf7MBz-Wr6O8Ol1VtP1_7rQ9z5hupg7zJ2nSb75QsWhOGeRF22Fh051zx_7p1zhGcnbFlBu4Y01sdvrfBegSkj9Wh3ER5mQV9MWuWKLY1mXWNm8nJM2UfIfDN37qdxrU4lGT6pZRC6PS0jR3F5fa2WfDnokN7zUG7JLmFUok-9_9AtBjzjy-ghNPRLeKwLPhDS214H52gfoi3E0_PSOl97EgoVqptlpo8lRP4wrnLIyLl2oG4yhtrK2BRSuyFLgu-MS-1Kz7jcHQcDJZgPKU2dnS_PqCuTXtrKzCHsVLnGkeNHT1rFRR9moH=w755-h289-no&#34; alt=&#34;Automatic Page Generaor&#34; /&gt;&lt;/li&gt;
&lt;li&gt;만들어진 웹페이지는 &lt;code&gt;userid.github.io&lt;/code&gt;주소로 접속 할 수 있다.
&lt;img src=&#34;https://lh3.googleusercontent.com/3ARrtX1ijW469Ixp02fv9IcZBt77CaU6InqGNPmBF1iwhtR4DG5PnxVDQkXiUWT6DqxWdqJzoNCAfThrHPfLSuKadvIEt04Ue70aZtgGO9e0Rk93wrrNkM5KB9ipxjq0s7TDm3VBt1a3gnoVChtjFZLSVDxWdNdm9W_VarwYhBLyv0c77fKHxW7sMDDXIu2gkf-cvyrYjH5Ef6HxFMHgni5Gg2lEHrUhqXJWup5qSoiKy0a35UmaMEejr3HgzuEsFgi0YbUtvEyTXB5do86E-v5rEh_ggpepVW4R6RRYzTCEcA2jakYRvGUtr1cmjkZpTdr60Sxdd9QE6RPHrYNGJWPW4MkM3alQkorQnmbBPvD9-3ReT1wgcPzc-14C0DJHKDSBMIzcqbU-XEtLqreJ4HOALr5UvwaLZs7xTVlsXJPah7rFnqi_Gx3nMOGNPeKcurSBoYVUDv2i2im49SGaYUgjuLLUFiFUwhdlEaIpAniTeJpkkcOcOXgoAhZTacS1IgigsFi4owy5ix51BpRgTftSSUbl5fxLJz-jTZzgSFfp=w1124-h738-no&#34; alt=&#34;Generated page&#34; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이제부터는 Git만 사용할 줄 안다면 해당 repository를 clone 하고 마음대로 html을 수정하고 push 하면 된다. (git 사용법을 잘 모른다면 github web ui에서 파일을 수정할 수도 있다.)&lt;/p&gt;

&lt;h1 id=&#34;이미-git-project-가-있는-상태에서-해당-repository에-대한-github-page를-만드는-법-gh-pages-branch:b47502d0fc5a05431ea07f4e2ccfb4a7&#34;&gt;이미 git project 가 있는 상태에서 해당 repository에 대한 github page를 만드는 법.(gh-pages branch)&lt;/h1&gt;

&lt;p&gt;결론부터 미리 말하자면 각 project repository에 gh-pages라는 orphan branch(history가 없는 branch)를 만들고 해당 브랜치에 static pages들을 commit 하면 된다. 이렇게 하면 &lt;code&gt;http(s)://&amp;lt;username&amp;gt;.github.io/&amp;lt;projectname&amp;gt;&lt;/code&gt; 주소로 해당 static web page에 접속이 가능하다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;이미 생성한 repository 있는 상태에서..&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;repository clone.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$git clone github.com/user/repository.git
# Clone our repository
# Cloning into &#39;repository&#39;...
# remote: Counting objects: 2791, done.
# remote: Compressing objects: 100% (1225/1225), done.
# remote: Total 2791 (delta 1722), reused 2513 (delta 1493)
# Receiving objects: 100% (2791/2791), 3.77 MiB | 969 KiB/s, done.
# Resolving deltas: 100% (1722/1722), done.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;gh-pages 브랜치 생성.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$cd repository


$git checkout --orphan gh-pages
# Creates our branch, without any parents (it&#39;s an orphan!)
# Switched to a new branch &#39;gh-pages&#39;


$git rm -rf .
# Remove all files from the old working tree
# rm &#39;.gitignore&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;페이지 추가 및 push.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$echo &amp;quot;My Page&amp;quot; &amp;gt; index.html
$git add index.html정
$git commit -a -m &amp;quot;First pages commit&amp;quot;
$git push origin gh-pages
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&#34;https://help.github.com/articles/creating-project-pages-manually/&#34;&gt;Creating Project Pages manually&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;custom-domain-설정하기:b47502d0fc5a05431ea07f4e2ccfb4a7&#34;&gt;Custom Domain 설정하기&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;본인의 domain 호스팅 서비스에서 CNAME record 설정. ex) &lt;code&gt;blog.example.com&lt;/code&gt; -&amp;gt; &lt;code&gt;username.github.io&lt;/code&gt; (&lt;code&gt;http://&lt;/code&gt; 나 &lt;code&gt;https://&lt;/code&gt;는 빼고 입력해야 함)&lt;/li&gt;
&lt;li&gt;CNAME file 생성 : gh-pages branch에 CNAME이라는 파일을 만들고 blog.example.com 을 입력후 저장 &amp;amp; 커밋 &amp;amp; 푸시 (User page라면 master branch에)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&#34;https://help.github.com/articles/adding-a-cname-file-to-your-repository/&#34;&gt;Adding a cname file to your repository&lt;/a&gt;.&lt;br /&gt;
&lt;a href=&#34;https://help.github.com/articles/tips-for-configuring-a-cname-record-with-your-dns-provider/&#34;&gt;Tips for congiguring a CNAME record with your DNS provider&lt;/a&gt;.&lt;br /&gt;
&lt;a href=&#34;https://help.github.com/articles/about-custom-domains-for-github-pages-sites/#subdomains&#34;&gt;About custom domains for Github Pages sites&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>license</title>
      <link>https://blog.leehack.com/license/</link>
      <pubDate>Mon, 23 Nov 2015 13:39:02 -0500</pubDate>
      
      <guid>https://blog.leehack.com/license/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Gradle NDK Build Script Example</title>
      <link>https://blog.leehack.com/blog/2015/11/23/gradle-ndk-build-script-example/</link>
      <pubDate>Mon, 23 Nov 2015 12:56:25 -0500</pubDate>
      
      <guid>https://blog.leehack.com/blog/2015/11/23/gradle-ndk-build-script-example/</guid>
      <description>&lt;p&gt;With this sample, you&amp;rsquo;ll be able to build NDK from Android Studio.
Now the gradle-experimental plug-in supports dependency. The dependency part show you how to include prebuilt shared library.&lt;/p&gt;

&lt;p&gt;I put the prebuilt .so files into &lt;code&gt;/src/main/jniLibs&lt;/code&gt;. source codes are in &lt;code&gt;/src/main/jni&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The sample script is for android library project which will make &lt;code&gt;.aar&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath &#39;com.android.tools.build:gradle-experimental:0.7.0&#39;
    }
}

apply plugin: &#39;com.android.model.library&#39;
model {
    android {
        compileSdkVersion = 23
        buildToolsVersion = &amp;quot;23.0.2&amp;quot;
        defaultConfig.with {
            minSdkVersion.apiLevel = 19
            targetSdkVersion.apiLevel = 23
        }
    }

    android.ndk {
        moduleName = &amp;quot;libName&amp;quot;
        cppFlags.add(&amp;quot;-DANDROID_NDK&amp;quot;)
        cppFlags.add(&amp;quot;-fexceptions&amp;quot;)
        ldLibs.addAll([&amp;quot;android&amp;quot;, &amp;quot;log&amp;quot;, &amp;quot;GLESv2&amp;quot;, &amp;quot;dl&amp;quot;, &amp;quot;jnigraphics&amp;quot;, &amp;quot;z&amp;quot;])
        stl       = &amp;quot;stlport_static&amp;quot;
        abiFilters.add(&amp;quot;armeabi&amp;quot;)
        abiFilters.add(&amp;quot;armeabi-v7a&amp;quot;)
        abiFilters.add(&amp;quot;arm64-v8a&amp;quot;)
        abiFilters.add(&amp;quot;x86&amp;quot;)
        abiFilters.add(&amp;quot;x86_64&amp;quot;)
    }

    repositories {
        prebuilt(PrebuiltLibraries) {
            prebuiltSharedlib {
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file(&amp;quot;src/main/jniLibs/${targetPlatform.getName()}/prebuiltSharedlib.so&amp;quot;)
                }
            }
        }
    }
    android.sources {
        main {
            jni {
                dependencies {
                    library &amp;quot;prebuiltSharedlib&amp;quot;
                }
            }
        }
    }
}

dependencies {
    compile fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;])
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>블로그 플랫폼을 찾아서..</title>
      <link>https://blog.leehack.com/blog/2015/11/23/%EB%B8%94%EB%A1%9C%EA%B7%B8-%ED%94%8C%EB%9E%AB%ED%8F%BC%EC%9D%84-%EC%B0%BE%EC%95%84%EC%84%9C../</link>
      <pubDate>Mon, 23 Nov 2015 09:30:28 -0500</pubDate>
      
      <guid>https://blog.leehack.com/blog/2015/11/23/%EB%B8%94%EB%A1%9C%EA%B7%B8-%ED%94%8C%EB%9E%AB%ED%8F%BC%EC%9D%84-%EC%B0%BE%EC%95%84%EC%84%9C../</guid>
      <description>&lt;p&gt;블로깅을 열심히 하는 편은 아니지만 구글블로그를 만들어 놓고 가끔은 (겨우 포스팅 몇개지만..) 뭔가 남기고 싶을 때 들어가보곤 한다. 문제는 포스팅을 시도 할 때마다 견뎌내야만 하는 짜증스러운 에디터.. 가끔 관리를 하기때문에 중간에 테마라도 실수로 바꿔버리면 전에 설정해둔게 날아가버려 포스팅 글들이 엉망이 된다.. (대표적으로 코드 하이라이팅..)&lt;/p&gt;

&lt;p&gt;그래서 다른 블로그 플랫폼을 찾기 시작!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;조건&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Markdown을 지원할 것. (미적 감각도 없고 특히 위즈윅 에디터에 질림)&lt;/li&gt;
&lt;li&gt;버전관리가 될 것. (더 이상은 실수로 설정 뭔가를 날려먹고 싶지 않다)&lt;/li&gt;
&lt;li&gt;무료. (돈 내가면서까지 열심히 할 생각은 없음)&lt;/li&gt;
&lt;li&gt;내 개인 서버가 아니고 클라우드에 있을 것.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;일단 마크다운을 지원하는 호스팅 플랫폼들을 알아봄&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;www.wordpress.com&#34;&gt;Wordpress&lt;/a&gt; - 사실 제대로 확인은 안해봤지만.. 유명하긴 해도 좀 오래된 플랫폼이라 그닥 끌리지 않음.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;ghost.org&#34;&gt;Ghost&lt;/a&gt; - 좋아보였으나 무료가 아님.&lt;/p&gt;

&lt;p&gt;그리고 몇몇 호스팅 베이스 플랫폼들을 더 알아봤는데.. 결론은 다 별로 맘에 안듬.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;어디서 들어본건 있어서 Github에 static web hosting을 할 수있다는 것을 알고 있었기에 이걸 활용 할수있는 시스템을 알아보기 시작&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;예전에 nodejs를 건드려보면서 알게되었던 &lt;a href=&#34;http://haroopress.com&#34;&gt;haroopress&lt;/a&gt;를 먼저 테스트! 결과는 처참. 사이트에 나와있는 설명과는 달리 설치가 한방에 되지 않음. (아마도 튜토리얼은 맥베이스지만 난 리눅스를 사용해서 인 듯) 더 연구할 수도 있었지만 javascript를 별로 좋아하지 않기에.. 일단은.. 중단하기로 함.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://haroopress.com&#34;&gt;haroopress&lt;/a&gt;가 &lt;a href=&#34;http://octopress.org&#34;&gt;octopress&lt;/a&gt;를 nodejs버전으로 다시만든 국내판 같은 느낌고, &lt;a href=&#34;http://octopress.org&#34;&gt;octopress&lt;/a&gt;는 &lt;a href=&#34;https://jekyllrb.com&#34;&gt;jekyll&lt;/a&gt;에서 왔다는 결론에 이름. &lt;a href=&#34;https://jekyllrb.com&#34;&gt;jekyll&lt;/a&gt; 테스팅 시작!&lt;/p&gt;

&lt;p&gt;원조인 만큼 사용자가 많은 만큼 튜토리얼도 많고 설치에서 github에 deploy까지 순조롭게는 진행이 됨. 다 좋은데 문제는 ruby로 만들어졌다는게 맘에 안듬. 다른 PC에 설치할때마다 튜토리얼 따라해야 한다는게 까마득함..&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;마지막 선택 &lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Golang을 이용해 많은 프로젝트를 진행하진 않았지만 전에 회사에서 간단한 analytics 서버를 만든적도 있고 기회가 생길 때마다 끄적이고 있기에.. golang으로 만들어진 &lt;a href=&#34;https://gohugo.io&#34;&gt;hugo&lt;/a&gt;를 사용해보기로 함. 설치 아주 쉬움. 사용법 아주 쉬움. 몇 가지 문제라면 커뮤니티가 빈약하고&amp;hellip; 프로젝트 구조상 github에 deploy하는 과정이 쉽지 않음. (한번 개고생 하고 해보면 그다음 부터야 뭐. ㅎㅎㅎ)&lt;/p&gt;

&lt;p&gt;결국엔 내가 좋아하는 언어로 개발된 플랫폼을 선택한 느낌이 강하긴 포스팅을 하려면 각 PC에 직접 설치를 해줘야 하기에 설치가 쉽다는 것은 큰 장점이다. &lt;a href=&#34;https://jekyllrb.com&#34;&gt;jekyll&lt;/a&gt;이나. 다른 플랫폼도 커맨드 하나 때리면 다 되는 것처럼 나와있지만.. 실상은 그렇지 않다. 뭐 루비를 즐겨 사용하시는 분들이라면 문제가 없겠지만..&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Node.js debug on Eclipse</title>
      <link>https://blog.leehack.com/blog/2012/02/13/node.js-debug-on-eclipse/</link>
      <pubDate>Mon, 13 Feb 2012 19:24:00 +0000</pubDate>
      
      <guid>https://blog.leehack.com/blog/2012/02/13/node.js-debug-on-eclipse/</guid>
      <description>&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: left;&#34;&gt;1. Google Chrome developer tool 설치&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: left;&#34;&gt;Help-&amp;gt;Install new software-&amp;gt;&#34;http://chromedevtools.googlecode.com/svn/update/dev/&#34; 입력 후 아래와 같이 Google Chrome Developer tool 선택하여 설치&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: left;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-0gYwVb9jhuM/Tzmmvk94rEI/AAAAAAAADzM/0eBiqROipBQ/s1600/Install-1.jpg&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;640&#34; src=&#34;http://4.bp.blogspot.com/-0gYwVb9jhuM/Tzmmvk94rEI/AAAAAAAADzM/0eBiqROipBQ/s640/Install-1.jpg&#34; width=&#34;629&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: left;&#34;&gt;2. Eclipse를 실행해서 Debug perspective로 이동.&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: left;&#34;&gt;&lt;a href=&#34;http://2.bp.blogspot.com/-Rv9Mr8_f5Tg/Tzmk5Qf3umI/AAAAAAAADzE/1OhPHgiwGRo/s1600/Debug+-+Eclipse+SDK+-+_Users_leehack_Documents_workspace-1.jpg&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;271&#34; src=&#34;http://2.bp.blogspot.com/-Rv9Mr8_f5Tg/Tzmk5Qf3umI/AAAAAAAADzE/1OhPHgiwGRo/s400/Debug+-+Eclipse+SDK+-+_Users_leehack_Documents_workspace-1.jpg&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: left;&#34;&gt;*벌래모양이 보이지 않는 경우: windows-&amp;gt;open perspective-&amp;gt;Other-&amp;gt;debug&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: left;&#34;&gt;3. Node.js를 debug모드로 실행: $node --debug index.js&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: left;&#34;&gt;&lt;a href=&#34;http://2.bp.blogspot.com/-CcuLx805LCk/TzmogzZvn7I/AAAAAAAADzk/ESqvTYXYcDc/s1600/nodejstest+%E2%80%94+leehack@leehack-MSI-Notebook-PR211_+~_Android_android4+%E2%80%94+node+%E2%80%94+80%C3%9724.jpg&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://2.bp.blogspot.com/-CcuLx805LCk/TzmogzZvn7I/AAAAAAAADzk/ESqvTYXYcDc/s1600/nodejstest+%E2%80%94+leehack@leehack-MSI-Notebook-PR211_+~_Android_android4+%E2%80%94+node+%E2%80%94+80%C3%9724.jpg&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: left;&#34;&gt;4. Run-&amp;gt;Debug configuration에서 Standalone V8 VM에 커서 둔 후 new버튼 클릭&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: left;&#34;&gt;&lt;a href=&#34;http://1.bp.blogspot.com/-8wc1N7i8fO0/TzmnH7QLIqI/AAAAAAAADzU/cmS7ig8ksBk/s1600/Debug+Configurations-3.jpg&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;442&#34; src=&#34;http://1.bp.blogspot.com/-8wc1N7i8fO0/TzmnH7QLIqI/AAAAAAAADzU/cmS7ig8ksBk/s640/Debug+Configurations-3.jpg&#34; width=&#34;640&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: left;&#34;&gt;*Port를 5858로 지정 후 Debug버튼 클릭&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: left;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-yr5kszrvja0/TzmnxUvlgCI/AAAAAAAADzc/X-QFlE_fyCY/s1600/Debug+Configurations-4.jpg&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;437&#34; src=&#34;http://4.bp.blogspot.com/-yr5kszrvja0/TzmnxUvlgCI/AAAAAAAADzc/X-QFlE_fyCY/s640/Debug+Configurations-4.jpg&#34; width=&#34;640&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: left;&#34;&gt;5. 원하는 곳에 bp 찍고 debugging 시작!!&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: left;&#34;&gt;&lt;a href=&#34;http://2.bp.blogspot.com/-HJL_5vSSnFQ/TzmpKVGjn1I/AAAAAAAADzs/YD4WmcFvtv4/s1600/Debug+-+Node-5858_requestHandlers.js.chromium+-+Eclipse+SDK+-+_Users_leehack_Documents_workspace.jpg&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;409&#34; src=&#34;http://2.bp.blogspot.com/-HJL_5vSSnFQ/TzmpKVGjn1I/AAAAAAAADzs/YD4WmcFvtv4/s640/Debug+-+Node-5858_requestHandlers.js.chromium+-+Eclipse+SDK+-+_Users_leehack_Documents_workspace.jpg&#34; width=&#34;640&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: left;&#34;&gt;&lt;br /&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>DrewGaren.com: Nexus S - ICY&#43; S version 1.0</title>
      <link>https://blog.leehack.com/blog/2011/12/13/drewgaren.com-nexus-s---icy-s-version-1.0/</link>
      <pubDate>Tue, 13 Dec 2011 05:10:00 +0000</pubDate>
      
      <guid>https://blog.leehack.com/blog/2011/12/13/drewgaren.com-nexus-s---icy-s-version-1.0/</guid>
      <description>&lt;p&gt;기다리던 롬! 이제 플래싱 할시간!!&lt;br /&gt;&lt;br /&gt;여러가지 롬들 사용해봤지만 Nexus S용 ICS롬은 DrewGaren ROM이 제일 맘에 든다.&lt;br /&gt;구글 지원들이 Official ICS ROM 사용중이라고 하니 공식 릴리즈 되기 전까지는 큰 문제 없으면 이 롬에 정착 할 듯. &amp;lt;&amp;ndash; 플래싱 해보니.. 너무 문제가 많다. 다시 Beta ROM으로 복원 -_-;&lt;br /&gt;&lt;br /&gt;&lt;a href=&#34;http://www.drewgaren.com/2011/12/nexus-s-icy-s-version-10.html?spref=bl&#34;&gt;DrewGaren.com: Nexus S - ICY+ S version 1.0&lt;/a&gt;: Nexus S Rom - ICY+ S version 1.0  The first stable release of Android 4.0.1 Ice Cream Sandwich from DrewGaren. Minus, fully enabled camera e&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Android C2DM client 예제</title>
      <link>https://blog.leehack.com/blog/2011/12/09/android-c2dm-client-%EC%98%88%EC%A0%9C/</link>
      <pubDate>Fri, 09 Dec 2011 04:56:00 +0000</pubDate>
      
      <guid>https://blog.leehack.com/blog/2011/12/09/android-c2dm-client-%EC%98%88%EC%A0%9C/</guid>
      <description>&lt;p&gt;준비물 : c2dm account(&lt;a href=&#34;(/blog/2011/12/09/python으로-c2dm-server-만들기)&#34;&gt;파이썬으로 c2dm서버 만들기&lt;/a&gt; 포스팅 참조)&lt;/p&gt;

&lt;p&gt;만들 예제의 패키지 구조.&lt;br /&gt;
&lt;img src=&#34;http://4.bp.blogspot.com/-f9hw88JM4MU/TuHeizYCzYI/AAAAAAAADnE/_8JG2D4Tc50/s320/%25E1%2584%2589%25E1%2585%25B3%25E1%2584%258F%25E1%2585%25B3%25E1%2584%2585%25E1%2585%25B5%25E1%2586%25AB%25E1%2584%2589%25E1%2585%25A3%25E1%2586%25BA+2011-12-09+%25E1%2584%258B%25E1%2585%25A9%25E1%2584%2592%25E1%2585%25AE+7.10.00.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;우선 Manifest file의 Code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;manifest android:versioncode=&amp;quot;1&amp;quot; android:versionname=&amp;quot;1.0&amp;quot; package=&amp;quot;com.leehack.c2dmtest&amp;quot; xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;&amp;gt;
    &amp;lt;uses-sdk android:minsdkversion=&amp;quot;14&amp;quot;&amp;gt;
        &amp;lt;application android:icon=&amp;quot;@drawable/ic_launcher&amp;quot; android:label=&amp;quot;@string/app_name&amp;quot;&amp;gt;
            &amp;lt;activity android:label=&amp;quot;@string/app_name&amp;quot; android:name=&amp;quot;.C2DM_TESTActivity&amp;quot;&amp;gt;
                &amp;lt;intent-filter&amp;gt;
                    &amp;lt;action android:name=&amp;quot;android.intent.action.MAIN&amp;quot;&amp;gt;
                        &amp;lt;category android:name=&amp;quot;android.intent.category.LAUNCHER&amp;quot;&amp;gt;&amp;lt;/category&amp;gt;
                    &amp;lt;/action&amp;gt;
                &amp;lt;/intent-filter&amp;gt;
            &amp;lt;/activity&amp;gt;
            
            &amp;lt;!-- Only C2DM servers can send messages for the app. If permission is not set - any other app can generate it --&amp;gt;
            &amp;lt;receiver android:name=&amp;quot;.push.C2DMReceiver&amp;quot; android:permission=&amp;quot;com.google.android.c2dm.permission.SEND&amp;quot;&amp;gt;
                &amp;lt;!-- Receive the actual message --&amp;gt;
                &amp;lt;intent-filter&amp;gt;
                    &amp;lt;action android:name=&amp;quot;com.google.android.c2dm.intent.RECEIVE&amp;quot;&amp;gt;
                        &amp;lt;category android:name=&amp;quot;com.leehack.c2dmtest&amp;quot;&amp;gt;&amp;lt;/category&amp;gt;
                    &amp;lt;/action&amp;gt;
                &amp;lt;/intent-filter&amp;gt;
                &amp;lt;!-- Receive the registration id --&amp;gt;
                &amp;lt;intent-filter&amp;gt;
                    &amp;lt;action android:name=&amp;quot;com.google.android.c2dm.intent.REGISTRATION&amp;quot;&amp;gt;
                        &amp;lt;category android:name=&amp;quot;com.leehack.c2dmtest&amp;quot;&amp;gt;
                        &amp;lt;/category&amp;gt;
                    &amp;lt;/action&amp;gt;
                &amp;lt;/intent-filter&amp;gt;
            &amp;lt;/receiver&amp;gt;
        &amp;lt;/application&amp;gt;
        &amp;lt;!-- Only this application can receive the messages and registration result --&amp;gt;
        &amp;lt;permission android:name=&amp;quot;com.leehack.c2dmtest.permission.C2D_MESSAGE&amp;quot; android:protectionlevel=&amp;quot;signature&amp;quot;&amp;gt;
            &amp;lt;uses-permission android:name=&amp;quot;com.leehack.c2dmtest.permission.C2D_MESSAGE&amp;quot;&amp;gt;&amp;lt;/uses-permission&amp;gt;
            &amp;lt;!-- This app has permission to register and receive message --&amp;gt;
            &amp;lt;uses-permission android:name=&amp;quot;com.google.android.c2dm.permission.RECEIVE&amp;quot;&amp;gt;&amp;lt;/uses-permission&amp;gt;
        &amp;lt;/permission&amp;gt;
    &amp;lt;/uses-sdk&amp;gt;
&amp;lt;/manifest&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;C2DMReceiver.java: 리시버 작성.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.leehack.c2dmtest.push;
import android.app.Activity;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.util.Log;
import android.view.Gravity;
import android.widget.Toast;
public class C2DMReceiver extends BroadcastReceiver
{
    static String registration_id = null;
    private Context mContext;
    @Override
    public void onReceive(Context context, Intent intent) {
        if (intent.getAction().equals(&amp;quot;com.google.android.c2dm.intent.REGISTRATION&amp;quot;)) {
            handleRegistration(context, intent);
        } else if (intent.getAction().equals(&amp;quot;com.google.android.c2dm.intent.RECEIVE&amp;quot;)) {
        	//서버에 등록이 되면 Registration_id를 C2DM서버에서 보내준다. 받은 이 ID를 별도로 구성한 서버에 보내야 한다.
            handleMessage(context, intent);
        }
    }
    private void handleRegistration(Context context, Intent intent) {
        String registration = intent.getStringExtra(&amp;quot;registration_id&amp;quot;);
        if (intent.getStringExtra(&amp;quot;error&amp;quot;) != null) {
        	// Registration failed, should try again later.
        } else if (intent.getStringExtra(&amp;quot;unregistered&amp;quot;) != null) {
            registration = null;
        } else if (registration != null) {
            registration_id = registration;
            mContext = context;
            SharedPreferences sp  = mContext.getSharedPreferences(&amp;quot;com.leehack.c2dmtest&amp;quot;, Activity.MODE_PRIVATE);
            SharedPreferences.Editor ed = sp.edit();
            ed.putString(&amp;quot;registration_id&amp;quot;, registration_id);
            ed.commit();
            Toast toast = Toast.makeText(context, &amp;quot;Registration Id\n&amp;quot; + registration_id, Toast.LENGTH_LONG);
            toast.setGravity(Gravity.TOP | Gravity.CENTER, 0, 150);
            toast.show();
            Log.d(&amp;quot;C2DMReceiver&amp;quot;, &amp;quot;c2dm registered&amp;quot;);
        }
    }
    //메세지가 도착하면 토스트로 도착한 메세지를 보여줌
    private void handleMessage(Context context, Intent intent) {
        String c2dm_msg = intent.getExtras().getString(&amp;quot;msg&amp;quot;);
        System.out.println(&amp;quot;c2dm_msg======&amp;gt;&amp;quot; + c2dm_msg);
        Toast toast = Toast.makeText(context, &amp;quot;c2dmMessage\n&amp;quot; + c2dm_msg, Toast.LENGTH_LONG);
        toast.setGravity(Gravity.TOP | Gravity.CENTER, 0, 150);
        toast.show();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;PushHelper.java: c2dm 서버에 Register/Unregister 메소드 작성.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.leehack.c2dmtest.push;
import android.app.Activity;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
public class PushHelper {
	final static String c2dmDevId = &amp;quot;c2dm에 등록한 account&amp;quot;;
	public static void c2dmRegister(Context context){
		SharedPreferences sp  = context.getSharedPreferences(&amp;quot;com.leehack.c2dmtest&amp;quot;, Activity.MODE_PRIVATE);
		if(sp.getString(&amp;quot;registration_id&amp;quot;, null) != null)
			return;
		Intent registrationIntent = new Intent(
			&amp;quot;com.google.android.c2dm.intent.REGISTER&amp;quot;);
		registrationIntent.putExtra(&amp;quot;app&amp;quot;,
			PendingIntent.getBroadcast(context, 0, new Intent(), 0));
		registrationIntent.putExtra(&amp;quot;sender&amp;quot;, c2dmDevId);
		context.startService(registrationIntent);
	}
	public static void c2dmUnregister(Context context){
		Intent unregIntent = new Intent(&amp;quot;com.google.android.c2dm.intent.UNREGISTER&amp;quot;);
		unregIntent.putExtra(&amp;quot;app&amp;quot;, PendingIntent.getBroadcast(context, 0, new Intent(), 0));
		context.startService(unregIntent);
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;C2DM_TESTActivity.java: Register와 Unregister버튼의 동작을 정의&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.leehack.c2dmtest;
import android.app.Activity;
import android.os.Bundle;
import android.view.View;
import android.view.View.OnClickListener;
import com.leehack.c2dmtest.push.PushHelper;

public class C2DM_TESTActivity extends Activity {
	/** Called when the activity is first created. */
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.main);
		findViewById(R.id.button1).setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
			// TODO Auto-generated method stub
			PushHelper.c2dmRegister(C2DM_TESTActivity.this);
			}
		});
		findViewById(R.id.button2).setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				PushHelper.c2dmUnregister(C2DM_TESTActivity.this);
			}
		});
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;앞으로 해야 할일!.&lt;br /&gt;
1. 구글의 C2DM과 통신한 Push Server 구성.&lt;br /&gt;
2. Register를 한 후 C2DMReceiver를 통해 C2DM 서버로 부터 전달받은 Registration_ID를 구성한 Push Server로 전달하는 로직 구성.&lt;br /&gt;
    (&lt;a href=&#34;(/blog/2011/12/09/python으로-c2dm-server-만들기)&#34;&gt;파이썬으로 c2dm서버 만들기&lt;/a&gt; 포스팅을 참조하면 1번은 해결될 것이고 2번만 추가로 구성하면 된다)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python으로 c2dm server 만들기</title>
      <link>https://blog.leehack.com/blog/2011/12/09/python%EC%9C%BC%EB%A1%9C-c2dm-server-%EB%A7%8C%EB%93%A4%EA%B8%B0/</link>
      <pubDate>Fri, 09 Dec 2011 04:25:00 +0000</pubDate>
      
      <guid>https://blog.leehack.com/blog/2011/12/09/python%EC%9C%BC%EB%A1%9C-c2dm-server-%EB%A7%8C%EB%93%A4%EA%B8%B0/</guid>
      <description>&lt;p&gt;1.&amp;nbsp;&lt;a href=&#34;http://code.google.com/intl/ko-KR/android/c2dm/&#34;&gt;http://code.google.com/intl/ko-KR/android/c2dm/&lt;/a&gt; 에서 c2dm 서비스에 sign-up&lt;br /&gt;(gmail account를 새로 만들어서 가입하는 것이 좋다. - 실제로 이 account정보를 클라이언트 및 서버에 모두 넣어야 하고 더구나 서버에는 패스워드정보도 필요하기 때문)&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-HdKsVNq8U3Y/TuHWLJiuniI/AAAAAAAADm8/cOUAaTiV7_o/s1600/%25E1%2584%2589%25E1%2585%25B3%25E1%2584%258F%25E1%2585%25B3%25E1%2584%2585%25E1%2585%25B5%25E1%2586%25AB%25E1%2584%2589%25E1%2585%25A3%25E1%2586%25BA+2011-12-09+%25E1%2584%258B%25E1%2585%25A9%25E1%2584%2592%25E1%2585%25AE+6.33.53.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;336&#34; src=&#34;http://4.bp.blogspot.com/-HdKsVNq8U3Y/TuHWLJiuniI/AAAAAAAADm8/cOUAaTiV7_o/s640/%25E1%2584%2589%25E1%2585%25B3%25E1%2584%258F%25E1%2585%25B3%25E1%2584%2585%25E1%2585%25B5%25E1%2586%25AB%25E1%2584%2589%25E1%2585%25A3%25E1%2586%25BA+2011-12-09+%25E1%2584%258B%25E1%2585%25A9%25E1%2584%2592%25E1%2585%25AE+6.33.53.png&#34; width=&#34;640&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;2. 가입하면 E-mail로 가입한 Account로 서비스가 Enable되었다는 내용의 메일이 옮(보통 하루안에 오고 늦어도 몇일 사이에는 오는 듯)&lt;br /&gt;&lt;br /&gt;여기까지 준비 완료! 아래는 실제 파이썬 코드 시작!!&lt;br /&gt;&lt;br /&gt;&lt;pre class=&#34;brush:python&#34;&gt;import urllib, urllib2&lt;br /&gt;&lt;br /&gt;class ClientLoginTokenFactory(): &lt;br /&gt;    _token = None &lt;br /&gt;    &lt;br /&gt;    def &lt;strong&gt;init&lt;/strong&gt;(self):&lt;br /&gt;        self.url = &amp;lsquo;&lt;a href=&#34;https://www.google.com/accounts/ClientLogin&#39;&#34;&gt;https://www.google.com/accounts/ClientLogin&#39;&lt;/a&gt;&lt;br /&gt;        self.accountType = &amp;lsquo;GOOGLE&amp;rsquo;&lt;br /&gt;        self.email = &amp;lsquo;c2dm에 가입한 메일주소&amp;rsquo;&lt;br /&gt;        self.password = &amp;lsquo;c2dm에 가입한 메일주소의 패스워드&amp;rsquo;&lt;br /&gt;        self.source = &amp;lsquo;replstory-replstory-0&amp;rsquo;&lt;br /&gt;        self.service = &amp;lsquo;ac2dm&amp;rsquo;&lt;br /&gt;    &lt;br /&gt;    def getToken(self):    &lt;br /&gt;        if self._token is None:&lt;br /&gt;            &lt;br /&gt;            # Build payload&lt;br /&gt;            values = {&amp;lsquo;accountType&amp;rsquo; : self.accountType,&lt;br /&gt;                      &amp;lsquo;Email&amp;rsquo; : self.email,&lt;br /&gt;                      &amp;lsquo;Passwd&amp;rsquo; : self.password, &lt;br /&gt;                      &amp;lsquo;source&amp;rsquo; : self.source, &lt;br /&gt;                      &amp;lsquo;service&amp;rsquo; : self.service}&lt;br /&gt;            &lt;br /&gt;            # Build request&lt;br /&gt;            data = urllib.urlencode(values)&lt;br /&gt;            request = urllib2.Request(self.url, data)&lt;br /&gt;            &lt;br /&gt;            # Post&lt;br /&gt;            response = urllib2.urlopen(request)&lt;br /&gt;            responseAsString = response.read()&lt;br /&gt;            &lt;br /&gt;            # Format response&lt;br /&gt;            responseAsList = responseAsString.split(&amp;rsquo;\n&amp;rsquo;)&lt;br /&gt;            &lt;br /&gt;            self._token = responseAsList[2].split(&amp;lsquo;=&amp;rsquo;)[1]&lt;br /&gt;            &lt;br /&gt;        return self._token&lt;br /&gt;    &lt;br /&gt;class C2DM():&lt;br /&gt;    &lt;br /&gt;    def &lt;strong&gt;init&lt;/strong&gt;(self):&lt;br /&gt;        self.url = &amp;lsquo;&lt;a href=&#34;https://android.apis.google.com/c2dm/send&#39;&#34;&gt;https://android.apis.google.com/c2dm/send&#39;&lt;/a&gt;&lt;br /&gt;        self.clientAuth = None&lt;br /&gt;        self.registrationId = None&lt;br /&gt;        self.collapseKey = None&lt;br /&gt;        self.data = {}&lt;br /&gt;        &lt;br /&gt;    def sendMessage(self):&lt;br /&gt;        if self.registrationId == None or self.collapseKey == None:&lt;br /&gt;            return False&lt;br /&gt;        &lt;br /&gt;        clientAuthFactory = ClientLoginTokenFactory()&lt;br /&gt;        self.clientAuth = clientAuthFactory.getToken()&lt;br /&gt;        &lt;br /&gt;        # Build payload&lt;br /&gt;        values = {&amp;lsquo;registration_id&amp;rsquo; : self.registrationId,&lt;br /&gt;                  &amp;lsquo;collapse_key&amp;rsquo; : self.collapseKey}     &lt;br /&gt;        &lt;br /&gt;        # Loop over any data we want to send&lt;br /&gt;        for k, v in self.data.iteritems():            &lt;br /&gt;            values[&amp;lsquo;data.&amp;rsquo; + k] = v&lt;br /&gt;        &lt;br /&gt;        # Build request&lt;br /&gt;        headers = {&amp;lsquo;Authorization&amp;rsquo;: &amp;lsquo;GoogleLogin auth=&amp;rsquo; + self.clientAuth}        &lt;br /&gt;        data = urllib.urlencode(values)&lt;br /&gt;        request = urllib2.Request(self.url, data, headers)&lt;br /&gt;        &lt;br /&gt;        # Post&lt;br /&gt;        try:&lt;br /&gt;            response = urllib2.urlopen(request)&lt;br /&gt;            responseAsString = response.read()&lt;br /&gt;            &lt;br /&gt;            return responseAsString&lt;br /&gt;        except urllib2.HTTPError, e:&lt;br /&gt;            print &amp;lsquo;HTTPError &amp;rsquo; + str(e)&lt;br /&gt;            &lt;br /&gt;            &lt;br /&gt;sender = C2DM()&lt;br /&gt;sender.registrationId = &amp;lsquo;Android단말기에서 c2dm서버로 부터 받은 고유번호&amp;rsquo;&lt;br /&gt;sender.collapseKey = 1&lt;br /&gt;sender.data = {&amp;lsquo;msg&amp;rsquo;:&amp;lsquo;test&amp;rsquo;}&lt;br /&gt;response = sender.sendMessage()&lt;br /&gt;print response&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;9,10,79 라인의 정보만 바꾸고 실행하면 c2dm등록된 단말기로 test라는 푸시 메세지가 날아간다.&lt;br /&gt;&lt;a href=&#34;http://blog.boxedice.com/2010/10/07/android-push-notifications-tutorial/&#34;&gt;http://blog.boxedice.com/2010/10/07/android-push-notifications-tutorial/&lt;/a&gt;&amp;nbsp;에 있는 예제코드인데 제대로 돌지 않아서 약간의 수정만 했음.&lt;br /&gt;&lt;br /&gt;이미 눈치 채셨겠지만 실제 사용시에는 78라인부터만 따로 가져가서 원하는 곳에 사용하면 된다. collapseKey를 1로 고정해두고 사용하면 c2dm메세지가 동일한 단말에 동일한 메세지를 계속 적으로 보낼 경우 중간중간 빼먹는 경우가 생긴다. 구글에서 중복된 메세지 전송을 방지하게 넣어둔 코드임. 중복으로 보내는 메세지라도 단말에 꼭 전송이 되어야 하는 메세지라면 collapseKey를 increase하면서 보내는 것이 상책!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pydev에서 Library 인식 안될 때</title>
      <link>https://blog.leehack.com/blog/2011/12/08/pydev%EC%97%90%EC%84%9C-library-%EC%9D%B8%EC%8B%9D-%EC%95%88%EB%90%A0-%EB%95%8C/</link>
      <pubDate>Thu, 08 Dec 2011 00:11:00 +0000</pubDate>
      
      <guid>https://blog.leehack.com/blog/2011/12/08/pydev%EC%97%90%EC%84%9C-library-%EC%9D%B8%EC%8B%9D-%EC%95%88%EB%90%A0-%EB%95%8C/</guid>
      <description>&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;여러가지 파이썬용 웹프레임웍을 이클립스의 Pydev에서 돌려보는 중 아주 눈에 거슬리는 것을 발견!!&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-Kjw6eJWF2jg/TuBHAnvNgFI/AAAAAAAADmc/tOcbO50iSPs/s1600/%25E1%2584%2589%25E1%2585%25B3%25E1%2584%258F%25E1%2585%25B3%25E1%2584%2585%25E1%2585%25B5%25E1%2586%25AB%25E1%2584%2589%25E1%2585%25A3%25E1%2586%25BA+2011-12-08+%25E1%2584%258B%25E1%2585%25A9%25E1%2584%2592%25E1%2585%25AE+2.11.16.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;116&#34; src=&#34;http://4.bp.blogspot.com/-Kjw6eJWF2jg/TuBHAnvNgFI/AAAAAAAADmc/tOcbO50iSPs/s320/%25E1%2584%2589%25E1%2585%25B3%25E1%2584%258F%25E1%2585%25B3%25E1%2584%2585%25E1%2585%25B5%25E1%2586%25AB%25E1%2584%2589%25E1%2585%25A3%25E1%2586%25BA+2011-12-08+%25E1%2584%258B%25E1%2585%25A9%25E1%2584%2592%25E1%2585%25AE+2.11.16.png&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style=&#34;text-align: center;&#34;&gt;빌드도 잘되고 Run도 잘되는데 저 빨간줄! 엑스표! 에디터상에 나타나는거 아주 짜증스럽다!&lt;/div&gt;&lt;div style=&#34;text-align: center;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: center;&#34;&gt;오늘은 맘먹고 고치겠다고 선언! 아무리 웹을 뒤져도 나오지 않는다! 왜일까... 결국엔 삽질 끝에 아주 간단히 해결.. eclipse-&amp;gt;preference-&amp;gt;interpreter -Python&lt;/div&gt;&lt;div style=&#34;text-align: center;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://1.bp.blogspot.com/-pguZkmifMq8/TuBHslyT4yI/AAAAAAAADmk/PqCAHRBjujY/s1600/%25E1%2584%2589%25E1%2585%25B3%25E1%2584%258F%25E1%2585%25B3%25E1%2584%2585%25E1%2585%25B5%25E1%2586%25AB%25E1%2584%2589%25E1%2585%25A3%25E1%2586%25BA+2011-12-08+%25E1%2584%258B%25E1%2585%25A9%25E1%2584%2592%25E1%2585%25AE+2.14.11.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;404&#34; src=&#34;http://1.bp.blogspot.com/-pguZkmifMq8/TuBHslyT4yI/AAAAAAAADmk/PqCAHRBjujY/s640/%25E1%2584%2589%25E1%2585%25B3%25E1%2584%258F%25E1%2585%25B3%25E1%2584%2585%25E1%2585%25B5%25E1%2586%25AB%25E1%2584%2589%25E1%2585%25A3%25E1%2586%25BA+2011-12-08+%25E1%2584%258B%25E1%2585%25A9%25E1%2584%2592%25E1%2585%25AE+2.14.11.png&#34; width=&#34;640&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style=&#34;text-align: center;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: center;&#34;&gt;위 화면에서 Auto Config click하면 이런화면이 나온다.&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://1.bp.blogspot.com/-iyg6LNy26oE/TuBIDHHPyvI/AAAAAAAADms/QIXg-WeflHA/s1600/%25E1%2584%2589%25E1%2585%25B3%25E1%2584%258F%25E1%2585%25B3%25E1%2584%2585%25E1%2585%25B5%25E1%2586%25AB%25E1%2584%2589%25E1%2585%25A3%25E1%2586%25BA+2011-12-08+%25E1%2584%258B%25E1%2585%25A9%25E1%2584%2592%25E1%2585%25AE+2.15.32.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;608&#34; src=&#34;http://1.bp.blogspot.com/-iyg6LNy26oE/TuBIDHHPyvI/AAAAAAAADms/QIXg-WeflHA/s640/%25E1%2584%2589%25E1%2585%25B3%25E1%2584%258F%25E1%2585%25B3%25E1%2584%2585%25E1%2585%25B5%25E1%2586%25AB%25E1%2584%2589%25E1%2585%25A3%25E1%2586%25BA+2011-12-08+%25E1%2584%258B%25E1%2585%25A9%25E1%2584%2592%25E1%2585%25AE+2.15.32.png&#34; width=&#34;640&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;보통은 위에 선택되어 있는 것처럼 해놓고 사용했었는데.. (easy_install하면 젤 아래 /Library/Python/2.7/site-packages 에 들어가기 때문에..)&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;알고보니 library로 인식이 안되고 있는 것이였다 -_-;;(이런 멍청한! 모르면 죽어야지!)&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;Select All한 후 코드를 다시 열어보니.. 깔끔하게 보인다.&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-D5DtWl3LbRo/TuBIrSwbwvI/AAAAAAAADm0/MNG13KWe_qI/s1600/%25E1%2584%2589%25E1%2585%25B3%25E1%2584%258F%25E1%2585%25B3%25E1%2584%2585%25E1%2585%25B5%25E1%2586%25AB%25E1%2584%2589%25E1%2585%25A3%25E1%2586%25BA+2011-12-08+%25E1%2584%258B%25E1%2585%25A9%25E1%2584%2592%25E1%2585%25AE+2.18.21.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://3.bp.blogspot.com/-D5DtWl3LbRo/TuBIrSwbwvI/AAAAAAAADm0/MNG13KWe_qI/s1600/%25E1%2584%2589%25E1%2585%25B3%25E1%2584%258F%25E1%2585%25B3%25E1%2584%2585%25E1%2585%25B5%25E1%2586%25AB%25E1%2584%2589%25E1%2585%25A3%25E1%2586%25BA+2011-12-08+%25E1%2584%258B%25E1%2585%25A9%25E1%2584%2592%25E1%2585%25AE+2.18.21.png&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;짠!&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;끝!!!&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;br /&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Python:: flask, webpy, Django, Bottle, web2py ...</title>
      <link>https://blog.leehack.com/blog/2011/12/07/python-flask-webpy-django-bottle-web2py-.../</link>
      <pubDate>Wed, 07 Dec 2011 22:18:00 +0000</pubDate>
      
      <guid>https://blog.leehack.com/blog/2011/12/07/python-flask-webpy-django-bottle-web2py-.../</guid>
      <description>&lt;p&gt;Python으로 Web 개발 공부를 해보는 중.. 아무런 정보도 맨토도 없이 무작정 Django책부터 하나 붙잡고 시작. 100% 끝낸건 아니지만 일단 기본적인 정보는 모두 캐냈다고 판단 후 책을 덮음.&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;https://www.djangoproject.com/s/img/logos/django-logo-negative.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;145&#34; src=&#34;https://www.djangoproject.com/s/img/logos/django-logo-negative.png&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;이제부터 현실적인 문제에 봉착. Django가 짱!인줄 알았는데.. 파이썬에는 수많은 좋은 웹프레임웍들이 존재한다는 것!&lt;br /&gt;&lt;br /&gt;&lt;a href=&#34;http://bottlepy.org/docs/dev/&#34;&gt;Bottle&lt;/a&gt;로 짠 Simple한 &lt;a href=&#34;http://fi.am/entry/building-a-website-api-with-django-part-1-api-func/&#34;&gt;REST API예제&lt;/a&gt;를 보고 1차 감탄!&lt;br /&gt;&lt;br /&gt;&lt;a href=&#34;http://web2py.com/&#34;&gt;Web2Py&lt;/a&gt; 깔고서 관리자 페이지에서 IDE까지 제공해주는 Detail에 2차 감탄!&lt;br /&gt;&lt;br /&gt;마지막으로 &lt;a href=&#34;http://webpy.org/&#34;&gt;webpy&lt;/a&gt;까지 보고 나니 점점 헷갈린다!&lt;br /&gt;&lt;br /&gt;Django가 잘 만들어진 녀석이긴 하지만 일단 다른 프래임웍들을 알아보다 보니 Python위에서 만들어진 기술이란 느낌 보다는 그냥 Django다! 라는 생각이 들었다.&lt;br /&gt;&lt;br /&gt;Web2Py는 정말 제공해주는 것도 많고 편리하지만.. 어쩌면 개발자보다는 관리자 프랜들리한 느낌이 들어 좀 끄적여 보다가 패스!&lt;br /&gt;&lt;br /&gt;webpy는 뭔가 내가 원하는 대로 자유롭게 사용할 수 있으면서도 심플하고 편리함을 모두 가지고 있어 맘에 들었고 이제 이것으로 결정! 하는 순간 &lt;a href=&#34;http://flask.pocoo.org/&#34;&gt;Flask&lt;/a&gt;&amp;nbsp;라는 녀석이 눈에 들어왔다.&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-beqQ0zkQbc8/TuBGb6cNDZI/AAAAAAAADmU/XAqcoH0bCxE/s1600/%25E1%2584%2589%25E1%2585%25B3%25E1%2584%258F%25E1%2585%25B3%25E1%2584%2585%25E1%2585%25B5%25E1%2586%25AB%25E1%2584%2589%25E1%2585%25A3%25E1%2586%25BA+2011-12-08+%25E1%2584%258B%25E1%2585%25A9%25E1%2584%2592%25E1%2585%25AE+2.08.42.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;129&#34; src=&#34;http://4.bp.blogspot.com/-beqQ0zkQbc8/TuBGb6cNDZI/AAAAAAAADmU/XAqcoH0bCxE/s320/%25E1%2584%2589%25E1%2585%25B3%25E1%2584%258F%25E1%2585%25B3%25E1%2584%2585%25E1%2585%25B5%25E1%2586%25AB%25E1%2584%2589%25E1%2585%25A3%25E1%2586%25BA+2011-12-08+%25E1%2584%258B%25E1%2585%25A9%25E1%2584%2592%25E1%2585%25AE+2.08.42.png&#34; width=&#34;320&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;아직 자세히는 보지 못했지만..&lt;br /&gt;Bottle스러운 심플함과 Django스러운 template engine(동일한 엔진을 plugin으로 붙여쓰는 듯..)을 가지고 있을 뿐만 아니라 webpy스러운 자유로움을 모두 가지고 있는 것 같다.&lt;br /&gt;&lt;br /&gt;Flask라는 녀석이 마지막 방황이 되길 바라며..&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>유동 IP 사용하는 개인서버에 유료 도메인 세팅</title>
      <link>https://blog.leehack.com/blog/2011/12/05/%EC%9C%A0%EB%8F%99-ip-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EA%B0%9C%EC%9D%B8%EC%84%9C%EB%B2%84%EC%97%90-%EC%9C%A0%EB%A3%8C-%EB%8F%84%EB%A9%94%EC%9D%B8-%EC%84%B8%ED%8C%85/</link>
      <pubDate>Mon, 05 Dec 2011 03:49:00 +0000</pubDate>
      
      <guid>https://blog.leehack.com/blog/2011/12/05/%EC%9C%A0%EB%8F%99-ip-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EA%B0%9C%EC%9D%B8%EC%84%9C%EB%B2%84%EC%97%90-%EC%9C%A0%EB%A3%8C-%EB%8F%84%EB%A9%94%EC%9D%B8-%EC%84%B8%ED%8C%85/</guid>
      <description>&lt;div style=&#34;text-align: center;&#34;&gt;결론부터 이야기 하자면 DNSEVER.COM 이라는 아주 고마운 서비스를 이용하면 DYNDNS.com 같은 Dynamic DNS 서비스를 개인 도메인에 붙여서 사용이 가능하다는 이야기!&lt;/div&gt;&lt;div style=&#34;text-align: center;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: center;&#34;&gt;*간단 요약&lt;/div&gt;&lt;div style=&#34;text-align: center;&#34;&gt;1. DNSEVER.COM 가입&lt;/div&gt;&lt;div style=&#34;text-align: center;&#34;&gt;2. DNSEVER에 도메인 추가.&lt;/div&gt;&lt;div style=&#34;text-align: center;&#34;&gt;3. 좌측 하단의 name server를 각 domain업체 홈페이지에서 변경&lt;/div&gt;&lt;div style=&#34;text-align: center;&#34;&gt;(공식설명: &lt;a href=&#34;http://kr.dnsever.com/help/wiki/wiki.php/NameServerChange&#34;&gt;http://kr.dnsever.com/help/wiki/wiki.php/NameServerChange&lt;/a&gt;)&lt;/div&gt;&lt;div style=&#34;text-align: center;&#34;&gt;4. 다이나믹DNS 등록&lt;/div&gt;&lt;div style=&#34;text-align: center;&#34;&gt;5. Auto Refresh 설정&lt;/div&gt;&lt;div style=&#34;text-align: center;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: center;&#34;&gt;아래 링크에 가면 아주 친절하세 설명해주신 포스팅이 있다.&lt;/div&gt;&lt;div style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;http://blog.naver.com/PostView.nhn?blogId=h_ranissa&amp;amp;logNo=100142960483&#34;&gt;[팁]개인pc에 유료도메인 셋팅하기(포워딩) :: 네이버 블로그&lt;/a&gt;:&lt;/div&gt;&lt;div style=&#34;text-align: center;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: center;&#34;&gt;위 포스팅은 Windows base로 Refresh설명을 해주셨지만 아래 공식사이트에 가면 Linux용 설정방법도 있음.&lt;/div&gt;&lt;div style=&#34;text-align: center;&#34;&gt;&lt;a href=&#34;http://kr.dnsever.com/start.html?user_domain=leehack.com&amp;amp;selected_menu=aboutddns&amp;amp;skey=leehack:8045eb284afb29fd65e10eeba0d4a77f&#34;&gt;DNSEVER사용법&lt;/a&gt;&lt;/div&gt;&lt;div style=&#34;text-align: center;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: center;&#34;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&#34;text-align: center;&#34;&gt;*주의: Name server를 변경했기 때문에 향후 도메인 관리는 모두 DNSEVER에서 해야함. 유료화 계획이 없는 무료서비스임에도 불구하고 꽤 오래된 서비스이며 안정성도 어느정도 보장이 되어있으나 역시나 무료서비스에 Name Server를 맡기는 만큼 신중을 기해야 하는 것도 사실.&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>MAC에서 SSH Key 생성</title>
      <link>https://blog.leehack.com/blog/2011/12/05/mac%EC%97%90%EC%84%9C-ssh-key-%EC%83%9D%EC%84%B1/</link>
      <pubDate>Mon, 05 Dec 2011 02:10:00 +0000</pubDate>
      
      <guid>https://blog.leehack.com/blog/2011/12/05/mac%EC%97%90%EC%84%9C-ssh-key-%EC%83%9D%EC%84%B1/</guid>
      <description>&lt;p&gt;&lt;br /&gt;1. SSH key가 있는지 확인&lt;br /&gt;$cd ~/.ssh&lt;br /&gt;&lt;br /&gt;2. 기존키 백업&lt;br /&gt;$mkdir key_backup&lt;br /&gt;$cp id_rsa* keybackup&lt;br /&gt;$rm id_rsa*&lt;br /&gt;&lt;br /&gt;3. ssh key 생성하기&lt;br /&gt;$ssh-keygen -t rsa -C &amp;ldquo;이메일 주소&amp;rdquo;&lt;br /&gt;Generating public/private rsa key pair.&lt;br /&gt;Enter file in which to save the key&lt;br /&gt;(/Users/사용자폴더/.ssh/id_rsa):엔터!&lt;br /&gt;Enter passphrase (empty for no passphrase:패스워드!&lt;br /&gt;Enter same passphrase again: 한번더!&lt;br /&gt;&lt;br /&gt;*GitHub 사용법에서 퍼옴&lt;br /&gt;&lt;a href=&#34;http://help.github.com/mac-set-up-git/&#34;&gt;http://help.github.com/mac-set-up-git/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>