<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ndk on leehack&#39;s blog</title>
    <link>http://blog.leehack.com/categories/ndk/</link>
    <description>Recent content in Ndk on leehack&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 24 Nov 2015 18:56:44 -0500</lastBuildDate>
    <atom:link href="http://blog.leehack.com/categories/ndk/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How I debugged memory leak issue for mediaserver</title>
      <link>http://blog.leehack.com/blog/2015/11/24/how-i-debugged-memory-leak-issue-for-mediaserver/</link>
      <pubDate>Tue, 24 Nov 2015 18:56:44 -0500</pubDate>
      
      <guid>http://blog.leehack.com/blog/2015/11/24/how-i-debugged-memory-leak-issue-for-mediaserver/</guid>
      <description>&lt;p&gt;Recently I had to fix big memory leak issue in &amp;ldquo;medieaserver&amp;rdquo;. From the internet I found very nice tool called &lt;code&gt;addr2func&lt;/code&gt; for fixing the issue.&lt;/p&gt;

&lt;p&gt;The tool is written by &lt;a href=&#34;http://freepine.blogspot.ca/2010/02/analyze-memory-leak-of-android-native.html&#34;&gt;freepine&lt;/a&gt; and I modified for supporting latest version of AOSP bases codes(5.0) and uploaded into Github : &lt;a href=&#34;https://github.com/leehack/addr2func&#34;&gt;addr2func&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Pre-condition - eng or userdebug build of device and android full source code&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Download &lt;a href=&#34;https://raw.githubusercontent.com/leehack/addr2func/master/addr2func.py&#34;&gt;addr2func&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Give excute permission.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$chmod +x addr2func.py
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Enable memory allocation debug feature for &lt;code&gt;mediaserver&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$adb shell setprop libc.debug.malloc 1
$adb shell ps mediaserver
$adb shell kill &amp;lt;mediaserver_pid&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Dump memory status of &lt;code&gt;mediaserver&lt;/code&gt; into &lt;code&gt;dump1&lt;/code&gt; file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$adb shell ps mediaserver
$adb pull /proc/&amp;lt;mediaserver_pid&amp;gt;/maps
$adb shell dumpsys media.player -m &amp;gt; dump1
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Do the memory leak test on the device.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Dump memory status of &lt;code&gt;mediaserver&lt;/code&gt; into &lt;code&gt;dump2&lt;/code&gt; file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$adb pull /proc/&amp;lt;mediaserver_pid&amp;gt;/maps
$adb shell dumpsys media.player -m &amp;gt; dump2
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;make &lt;code&gt;diff&lt;/code&gt; between &lt;code&gt;dump1&lt;/code&gt; and &lt;code&gt;dump2&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$diff dump1 dump2 &amp;gt; diff
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Save memory allocation trace into &lt;code&gt;mem_trace&lt;/code&gt; file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$./addr2func.py --root-dir=&amp;lt;AOSP_dir&amp;gt; --maps-file=maps --product=&amp;lt;product_name_of_your_build&amp;gt; diff &amp;gt; mem_trace
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The memory allocation trace is saved in &lt;code&gt;mem_trace&lt;/code&gt; file. It will show you where exactly the memory is allocated. &lt;code&gt;dup&lt;/code&gt; is duplication count.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gradle NDK Build Script Example</title>
      <link>http://blog.leehack.com/blog/2015/11/23/gradle-ndk-build-script-example/</link>
      <pubDate>Mon, 23 Nov 2015 12:56:25 -0500</pubDate>
      
      <guid>http://blog.leehack.com/blog/2015/11/23/gradle-ndk-build-script-example/</guid>
      <description>&lt;p&gt;With this sample, you&amp;rsquo;ll be able to build NDK from Android Studio.
Now the gradle-experimental plug-in supports dependency. The dependency part show you how to include prebuilt shared library.&lt;/p&gt;

&lt;p&gt;I put the prebuilt .so files into &lt;code&gt;/src/main/jniLibs&lt;/code&gt;. source codes are in &lt;code&gt;/src/main/jni&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The sample script is for android library project which will make &lt;code&gt;.aar&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath &#39;com.android.tools.build:gradle-experimental:0.7.0&#39;
    }
}

apply plugin: &#39;com.android.model.library&#39;
model {
    android {
        compileSdkVersion = 23
        buildToolsVersion = &amp;quot;23.0.2&amp;quot;
        defaultConfig.with {
            minSdkVersion.apiLevel = 19
            targetSdkVersion.apiLevel = 23
        }
    }

    android.ndk {
        moduleName = &amp;quot;libName&amp;quot;
        cppFlags.add(&amp;quot;-DANDROID_NDK&amp;quot;)
        cppFlags.add(&amp;quot;-fexceptions&amp;quot;)
        ldLibs.addAll([&amp;quot;android&amp;quot;, &amp;quot;log&amp;quot;, &amp;quot;GLESv2&amp;quot;, &amp;quot;dl&amp;quot;, &amp;quot;jnigraphics&amp;quot;, &amp;quot;z&amp;quot;])
        stl       = &amp;quot;stlport_static&amp;quot;
        abiFilters.add(&amp;quot;armeabi&amp;quot;)
        abiFilters.add(&amp;quot;armeabi-v7a&amp;quot;)
        abiFilters.add(&amp;quot;arm64-v8a&amp;quot;)
        abiFilters.add(&amp;quot;x86&amp;quot;)
        abiFilters.add(&amp;quot;x86_64&amp;quot;)
    }

    repositories {
        prebuilt(PrebuiltLibraries) {
            prebuiltSharedlib {
                binaries.withType(SharedLibraryBinary) {
                    sharedLibraryFile = file(&amp;quot;src/main/jniLibs/${targetPlatform.getName()}/prebuiltSharedlib.so&amp;quot;)
                }
            }
        }
    }
    android.sources {
        main {
            jni {
                dependencies {
                    library &amp;quot;prebuiltSharedlib&amp;quot;
                }
            }
        }
    }
}

dependencies {
    compile fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;])
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>