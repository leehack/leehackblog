<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on leehack&#39;s blog</title>
    <link>http://blog.leehack.com/categories/blog/</link>
    <description>Recent content in Blog on leehack&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 25 Nov 2015 12:37:00 -0500</lastBuildDate>
    <atom:link href="http://blog.leehack.com/categories/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Hugo 설치하기</title>
      <link>http://blog.leehack.com/blog/2015/11/25/hugo-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0/</link>
      <pubDate>Wed, 25 Nov 2015 12:37:00 -0500</pubDate>
      
      <guid>http://blog.leehack.com/blog/2015/11/25/hugo-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://blog.leehack.com/blog/2015/11/23/블로그-플랫폼을-찾아서../&#34;&gt;블로그 플랫폼을 찾아서&lt;/a&gt;에서 언급한 것처럼 이 블로그는 &lt;a href=&#34;(https://gohugo.io/)&#34;&gt;Hugo&lt;/a&gt;로 만들었다.
&lt;a href=&#34;(https://gohugo.io/)&#34;&gt;Hugo&lt;/a&gt;를 설치하기 전에 &lt;a href=&#34;https://jekyllrb.com&#34;&gt;jekyll&lt;/a&gt;이나 &lt;a href=&#34;http://octopress.org&#34;&gt;octopress&lt;/a&gt; 그리고 &lt;a href=&#34;http://haroopress.com&#34;&gt;haroopress&lt;/a&gt;를 알아봤으나 만족스럽지 못했고 빠르고 쉬운 Golang으로 만들어진 &lt;a href=&#34;(https://gohugo.io/)&#34;&gt;Hugo&lt;/a&gt;를 선택했다.&lt;/p&gt;

&lt;p&gt;아직 &lt;a href=&#34;https://jekyllrb.com&#34;&gt;Jekyll&lt;/a&gt;만큼 커뮤니티가 활성화 되어있지 않고 아주 널리 쓰이고 있지는 않기 때문에 조금 삽질을 하긴 했지만..
한번 설치를 하고 나서는 모든게 꽤나 만족스러웠다. 전반적으로 &lt;a href=&#34;https://jekyllrb.com&#34;&gt;Jekyll&lt;/a&gt;과 닮은 부분이 많기 때문에 기존 &lt;a href=&#34;https://jekyllrb.com&#34;&gt;jekyll&lt;/a&gt;사용자는 어렵지 않게 넘어 올 수 있을 것 같다.&lt;/p&gt;

&lt;p&gt;일단 &lt;a href=&#34;(https://gohugo.io/)&#34;&gt;Hugo&lt;/a&gt;는 다른 static 기반 시스템처럼 포스팅을 파일로 관리하고 포스팅들과 테마 설정 등을 툴이 알아서 믹싱하여 html베이스의 사이트로 컨버팅 해주는 시스템이다.&lt;/p&gt;

&lt;p&gt;내 경우는 이렇게 사용한다.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://ko.wikipedia.org/wiki/%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4&#34;&gt;Markdown&lt;/a&gt;으로 글을 작성.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;로컬에서 작성한 글을 확인.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Git repository에 commit.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;스크립트를 이용해 Github에 Deploy.&lt;br /&gt;
*&lt;em&gt;사실 개발자가 아니고서는 진입장벽이 조금 있는 편이다. 일반 유저라면 기존의 블로깅 시스템처럼 웹사이트에 접속해서 글을 쓰는 편이 편할 수도 있다.&lt;/em&gt;&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;설치하기:99a340e556ac96b49661880bbcdb4ef9&#34;&gt;설치하기&lt;/h2&gt;

&lt;h4 id=&#34;mac-유저:99a340e556ac96b49661880bbcdb4ef9&#34;&gt;Mac 유저&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://brew.sh/&#34;&gt;HomeBrew&lt;/a&gt; 설치 (설치가 안 되어있다면).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;(https://gohugo.io/)&#34;&gt;Hugo&lt;/a&gt; 설치.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ brew install hugo
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;windows나-linux등-타-os-유저:99a340e556ac96b49661880bbcdb4ef9&#34;&gt;Windows나 Linux등 타 OS 유저&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;(https://gohugo.io/)&#34;&gt;Hugo&lt;/a&gt; 다운로드 및 설치 : &lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;릴리즈 페이지&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;golang-유저-source-code:99a340e556ac96b49661880bbcdb4ef9&#34;&gt;Golang 유저(Source code)&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;pre&gt;&lt;code&gt;$ go get -u -v github.com/spf13/hugo
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;사이트-만들기:99a340e556ac96b49661880bbcdb4ef9&#34;&gt;사이트 만들기&lt;/h2&gt;

&lt;p&gt;hugo 명령어를 이용해서 기본 사이트를 만든다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new site /path/to/site
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;만들어진 사이트의 구조.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  - archetypes/
  - content/
  - layouts/
  - static/
    config.toml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;이제 사이트의 테마를 설치할 단계.&lt;br /&gt;
*&lt;em&gt;기본적으로 아무런 테마가 설치되지 않기 때문에 html로 컨버팅을 해도 아무것도 볼 수 없다&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://themes.gohugo.io/&#34;&gt;Hugo Theme showcase&lt;/a&gt;에서 원하는 테마를 고르고 설치한다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;ex) install hyde-x theme.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd your_site_repo/
$ mkdir themes
$ cd themes
$ git clone https://github.com/zyro/hyde-x
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;.git&lt;/code&gt; 관련 파일을 지운다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rm -rf hyde-x/.git
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;config.toml 파일을 열어서 &lt;code&gt;theme = &amp;quot;hyde-x&amp;quot;&lt;/code&gt; 을 추가한다.&lt;br /&gt;
*&lt;em&gt;이 부분은 각 테마 마다 컨픽이 다르니 각 테마의 컨픽 방법 참고&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;새 포스팅 만들기(&lt;code&gt;content/post/first.md&lt;/code&gt;에 파일이 만들어진다)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo new post/first.md
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;만들어진 파일을 열어보면 상단에 아래와 같은 헤더가 먼저 보일 것이다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;+++
categories = []
date = &amp;quot;2015-11-26T09:21:07-05:00&amp;quot;
description = &amp;quot;&amp;quot;
draft = true
keywords = []
title = &amp;quot;first&amp;quot;

+++
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;헤더를 수정하고 &lt;code&gt;+++&lt;/code&gt; 아래 부분에 &lt;a href=&#34;https://ko.wikipedia.org/wiki/%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4&#34;&gt;Markdown&lt;/a&gt;으로 글을 작성하면 된다.&lt;/p&gt;

&lt;p&gt;이제 작성한 글을 확인해 볼 단계.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo serve -w -D
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;위 명령어를 내리면 &lt;code&gt;http://127.0.0.1:1313&lt;/code&gt;에 웹서버가 열리고 브라우저로 접속하면 작성한 내용을 확인 할 수 있다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-w&lt;/code&gt; 옵션을 주면 프로젝트 내에서 수정한 내용이 서버를 재시작하지 않아도 자동으로 적용된다.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-D&lt;/code&gt; 옵션을 주면 &lt;code&gt;draft = true&lt;/code&gt;인 포스팅들까지 랜더링 해준다. (각 포스팅의 헤더 참고)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;작성한 글이나 변경한 설정들이 원하는대로 된 것을 브라우저에서 확인이 되었으면 퍼블리시 단계.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;일단 Ctrl+C로 서버를 종료.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;publish를 원하는 글들의 헤더에서 &lt;code&gt;draft = true&lt;/code&gt; 라인을 제거.&lt;br /&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;public 폴더에 랜더링한 html파일들을 저장.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;public 폴더에 저장된 파일들을 원하는 웹서버에 올리면 된다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;필자의 경우엔 github static page 호스팅을 이용한다. &lt;a href=&#34;blog/2015/11/23/github-static-website-만들기/&#34;&gt;참고&lt;/a&gt;.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gohugo.io/tutorials/github-pages-blog/&#34;&gt;Hosting on GitHub Pages&lt;/a&gt;에 있는 deplay.sh 스크립트를 이용하면 편리하다.&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;참조:99a340e556ac96b49661880bbcdb4ef9&#34;&gt;참조&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://gohugo.io/overview/quickstart/&#34;&gt;Hugo Quickstart guide&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Github static website 만들기</title>
      <link>http://blog.leehack.com/blog/2015/11/23/github-static-website-%EB%A7%8C%EB%93%A4%EA%B8%B0/</link>
      <pubDate>Mon, 23 Nov 2015 21:20:51 -0500</pubDate>
      
      <guid>http://blog.leehack.com/blog/2015/11/23/github-static-website-%EB%A7%8C%EB%93%A4%EA%B8%B0/</guid>
      <description>

&lt;h1 id=&#34;github-page란:b47502d0fc5a05431ea07f4e2ccfb4a7&#34;&gt;Github Page란?&lt;/h1&gt;

&lt;p&gt;PHP나 ASP 같은 서버스크립트 베이스의 웹사이트는 올리지 못하더라도 HTML과 Javscript등으로 이루어진 사이트를 호스팅 할 수 있는 서비스.
Github에 repository를 만들고 해당 repository에 index.html을 비롯한 파일들을 올리면 &lt;code&gt;&amp;lt;username&amp;gt;.github.io&lt;/code&gt; URL로 접속이 가능하다.
물론 custom domain을 설정해서 사용할 수도 있다.&lt;/p&gt;

&lt;h1 id=&#34;우선-automatic-generator를-이용해-페이지-만들어보기-user-or-organization-pages-sites:b47502d0fc5a05431ea07f4e2ccfb4a7&#34;&gt;우선 Automatic Generator를 이용해 페이지 만들어보기(User or Organization Pages sites)&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;Github 가입하기: &lt;a href=&#34;https://github.com&#34;&gt;Github&lt;/a&gt;에서 가입하면 된다.&lt;/li&gt;
&lt;li&gt;Repository 만들기

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com&#34;&gt;Github&lt;/a&gt;에 로그인 하면 나오는 메인페이지의 우측 상단 &lt;code&gt;+New repository&lt;/code&gt; 버튼을 눌러 새로운 repository만든다.&lt;/li&gt;
&lt;li&gt;repository를 만들때 본인의 &lt;code&gt;&amp;lt;username&amp;gt;.github.io&lt;/code&gt;를 repository 이름으로 설정한다.
&lt;img src=&#34;https://lh3.googleusercontent.com/dS8Dmo1xhiZ-IoXm9VaxoSwxqDMW8o_B759yWUMnRvi3HLYPzxiUXeRNsvHrRhnw-iOtidqDoDxMUG793aj0iRoFFxFR-yL2DLiz0AEgpMGcCbiSMO9ui5IM06JuQaBjhcE-hQOGxWk7xxEqnA1ZUEiZftVC8Htb0O0fhhDfbOLCtg03l92B30dB9sCaWOiDIbT5CjK_1mwWjjezVGjLL1IDmR-2zSCqyHVKwFFFbGG2SKeJlntpBXWb9o6e7L857U0JmTUIyQBrqv5ajM4LIVBjaE8evJKyCStRRVIjYh8evVSsixWNUn3OnsEP8D7tXwp209a5ssWDtG4rscqdii_SZtp4TqWJP190Nbcc66MAcfSl_vgwUxcLBE_wUicjhWCqWhEzI1AFpdieIRxJFERvv6P9UOCh3_Pn5KGetwx47FG4CIwihpnmsK0b8csI-fcIPhMaEWZNLjs122QcMVVQnFavvHkwDdEiIdYQl0L-1qbg2UTFWEKvdiuFM_aVEMZnZsUzSkaDt48QHibAEx-gEorKLCqrsLnsgpvT9g0f=w770-h580-no&#34; alt=&#34;New Repository&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;repository가 만들어진 후 해당 repository의 세팅에 가보면 &lt;code&gt;Github Pages&lt;/code&gt; 옵션에서 &lt;code&gt;Launch automatic page generator&lt;/code&gt;를 클릭하여 웹페이지를 만들 수 있다.
&lt;img src=&#34;https://lh3.googleusercontent.com/TMCslmHpI523-LYvK4utQlt6JlTK4bYiniNJ5UlJjcc0pHj1QL_cZCwQ-xQK_26W8ci9X9SajKIDdEFhy_yeqSZzqD7FKr_5cmvDa_dhHsc1n3FLf1og2XSv6Vs1Z3cBVwD98-sNmzpprRh1Fsy4Wqe0Z_hYOLrelDoMP79rdLGfxBxrtCm4XKW7OGxF8RVgOnqjQCbPfcHwLP-pbkcJAeZMSfkERRaSKJ9g_uuvi-JOiIjRqoByQf7MBz-Wr6O8Ol1VtP1_7rQ9z5hupg7zJ2nSb75QsWhOGeRF22Fh051zx_7p1zhGcnbFlBu4Y01sdvrfBegSkj9Wh3ER5mQV9MWuWKLY1mXWNm8nJM2UfIfDN37qdxrU4lGT6pZRC6PS0jR3F5fa2WfDnokN7zUG7JLmFUok-9_9AtBjzjy-ghNPRLeKwLPhDS214H52gfoi3E0_PSOl97EgoVqptlpo8lRP4wrnLIyLl2oG4yhtrK2BRSuyFLgu-MS-1Kz7jcHQcDJZgPKU2dnS_PqCuTXtrKzCHsVLnGkeNHT1rFRR9moH=w755-h289-no&#34; alt=&#34;Automatic Page Generaor&#34; /&gt;&lt;/li&gt;
&lt;li&gt;만들어진 웹페이지는 &lt;code&gt;userid.github.io&lt;/code&gt;주소로 접속 할 수 있다.
&lt;img src=&#34;https://lh3.googleusercontent.com/3ARrtX1ijW469Ixp02fv9IcZBt77CaU6InqGNPmBF1iwhtR4DG5PnxVDQkXiUWT6DqxWdqJzoNCAfThrHPfLSuKadvIEt04Ue70aZtgGO9e0Rk93wrrNkM5KB9ipxjq0s7TDm3VBt1a3gnoVChtjFZLSVDxWdNdm9W_VarwYhBLyv0c77fKHxW7sMDDXIu2gkf-cvyrYjH5Ef6HxFMHgni5Gg2lEHrUhqXJWup5qSoiKy0a35UmaMEejr3HgzuEsFgi0YbUtvEyTXB5do86E-v5rEh_ggpepVW4R6RRYzTCEcA2jakYRvGUtr1cmjkZpTdr60Sxdd9QE6RPHrYNGJWPW4MkM3alQkorQnmbBPvD9-3ReT1wgcPzc-14C0DJHKDSBMIzcqbU-XEtLqreJ4HOALr5UvwaLZs7xTVlsXJPah7rFnqi_Gx3nMOGNPeKcurSBoYVUDv2i2im49SGaYUgjuLLUFiFUwhdlEaIpAniTeJpkkcOcOXgoAhZTacS1IgigsFi4owy5ix51BpRgTftSSUbl5fxLJz-jTZzgSFfp=w1124-h738-no&#34; alt=&#34;Generated page&#34; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이제부터는 Git만 사용할 줄 안다면 해당 repository를 clone 하고 마음대로 html을 수정하고 push 하면 된다. (git 사용법을 잘 모른다면 github web ui에서 파일을 수정할 수도 있다.)&lt;/p&gt;

&lt;h1 id=&#34;이미-git-project-가-있는-상태에서-해당-repository에-대한-github-page를-만드는-법-gh-pages-branch:b47502d0fc5a05431ea07f4e2ccfb4a7&#34;&gt;이미 git project 가 있는 상태에서 해당 repository에 대한 github page를 만드는 법.(gh-pages branch)&lt;/h1&gt;

&lt;p&gt;결론부터 미리 말하자면 각 project repository에 gh-pages라는 orphan branch(history가 없는 branch)를 만들고 해당 브랜치에 static pages들을 commit 하면 된다. 이렇게 하면 &lt;code&gt;http(s)://&amp;lt;username&amp;gt;.github.io/&amp;lt;projectname&amp;gt;&lt;/code&gt; 주소로 해당 static web page에 접속이 가능하다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;이미 생성한 repository 있는 상태에서..&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;repository clone.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$git clone github.com/user/repository.git
# Clone our repository
# Cloning into &#39;repository&#39;...
# remote: Counting objects: 2791, done.
# remote: Compressing objects: 100% (1225/1225), done.
# remote: Total 2791 (delta 1722), reused 2513 (delta 1493)
# Receiving objects: 100% (2791/2791), 3.77 MiB | 969 KiB/s, done.
# Resolving deltas: 100% (1722/1722), done.
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;gh-pages 브랜치 생성.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$cd repository


$git checkout --orphan gh-pages
# Creates our branch, without any parents (it&#39;s an orphan!)
# Switched to a new branch &#39;gh-pages&#39;


$git rm -rf .
# Remove all files from the old working tree
# rm &#39;.gitignore&#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;페이지 추가 및 push.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$echo &amp;quot;My Page&amp;quot; &amp;gt; index.html
$git add index.html정
$git commit -a -m &amp;quot;First pages commit&amp;quot;
$git push origin gh-pages
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&#34;https://help.github.com/articles/creating-project-pages-manually/&#34;&gt;Creating Project Pages manually&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;custom-domain-설정하기:b47502d0fc5a05431ea07f4e2ccfb4a7&#34;&gt;Custom Domain 설정하기&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;본인의 domain 호스팅 서비스에서 CNAME record 설정. ex) &lt;code&gt;blog.example.com&lt;/code&gt; -&amp;gt; &lt;code&gt;username.github.io&lt;/code&gt; (&lt;code&gt;http://&lt;/code&gt; 나 &lt;code&gt;https://&lt;/code&gt;는 빼고 입력해야 함)&lt;/li&gt;
&lt;li&gt;CNAME file 생성 : gh-pages branch에 CNAME이라는 파일을 만들고 blog.example.com 을 입력후 저장 &amp;amp; 커밋 &amp;amp; 푸시 (User page라면 master branch에)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&#34;https://help.github.com/articles/adding-a-cname-file-to-your-repository/&#34;&gt;Adding a cname file to your repository&lt;/a&gt;.&lt;br /&gt;
&lt;a href=&#34;https://help.github.com/articles/tips-for-configuring-a-cname-record-with-your-dns-provider/&#34;&gt;Tips for congiguring a CNAME record with your DNS provider&lt;/a&gt;.&lt;br /&gt;
&lt;a href=&#34;https://help.github.com/articles/about-custom-domains-for-github-pages-sites/#subdomains&#34;&gt;About custom domains for Github Pages sites&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>블로그 플랫폼을 찾아서..</title>
      <link>http://blog.leehack.com/blog/2015/11/23/%EB%B8%94%EB%A1%9C%EA%B7%B8-%ED%94%8C%EB%9E%AB%ED%8F%BC%EC%9D%84-%EC%B0%BE%EC%95%84%EC%84%9C../</link>
      <pubDate>Mon, 23 Nov 2015 09:30:28 -0500</pubDate>
      
      <guid>http://blog.leehack.com/blog/2015/11/23/%EB%B8%94%EB%A1%9C%EA%B7%B8-%ED%94%8C%EB%9E%AB%ED%8F%BC%EC%9D%84-%EC%B0%BE%EC%95%84%EC%84%9C../</guid>
      <description>&lt;p&gt;블로깅을 열심히 하는 편은 아니지만 구글블로그를 만들어 놓고 가끔은 (겨우 포스팅 몇개지만..) 뭔가 남기고 싶을 때 들어가보곤 한다. 문제는 포스팅을 시도 할 때마다 견뎌내야만 하는 짜증스러운 에디터.. 가끔 관리를 하기때문에 중간에 테마라도 실수로 바꿔버리면 전에 설정해둔게 날아가버려 포스팅 글들이 엉망이 된다.. (대표적으로 코드 하이라이팅..)&lt;/p&gt;

&lt;p&gt;그래서 다른 블로그 플랫폼을 찾기 시작!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;조건&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Markdown을 지원할 것. (미적 감각도 없고 특히 위즈윅 에디터에 질림)&lt;/li&gt;
&lt;li&gt;버전관리가 될 것. (더 이상은 실수로 설정 뭔가를 날려먹고 싶지 않다)&lt;/li&gt;
&lt;li&gt;무료. (돈 내가면서까지 열심히 할 생각은 없음)&lt;/li&gt;
&lt;li&gt;내 개인 서버가 아니고 클라우드에 있을 것.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;일단 마크다운을 지원하는 호스팅 플랫폼들을 알아봄&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;www.wordpress.com&#34;&gt;Wordpress&lt;/a&gt; - 사실 제대로 확인은 안해봤지만.. 유명하긴 해도 좀 오래된 플랫폼이라 그닥 끌리지 않음.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;ghost.org&#34;&gt;Ghost&lt;/a&gt; - 좋아보였으나 무료가 아님.&lt;/p&gt;

&lt;p&gt;그리고 몇몇 호스팅 베이스 플랫폼들을 더 알아봤는데.. 결론은 다 별로 맘에 안듬.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;어디서 들어본건 있어서 Github에 static web hosting을 할 수있다는 것을 알고 있었기에 이걸 활용 할수있는 시스템을 알아보기 시작&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;예전에 nodejs를 건드려보면서 알게되었던 &lt;a href=&#34;http://haroopress.com&#34;&gt;haroopress&lt;/a&gt;를 먼저 테스트! 결과는 처참. 사이트에 나와있는 설명과는 달리 설치가 한방에 되지 않음. (아마도 튜토리얼은 맥베이스지만 난 리눅스를 사용해서 인 듯) 더 연구할 수도 있었지만 javascript를 별로 좋아하지 않기에.. 일단은.. 중단하기로 함.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://haroopress.com&#34;&gt;haroopress&lt;/a&gt;가 &lt;a href=&#34;http://octopress.org&#34;&gt;octopress&lt;/a&gt;를 nodejs버전으로 다시만든 국내판 같은 느낌고, &lt;a href=&#34;http://octopress.org&#34;&gt;octopress&lt;/a&gt;는 &lt;a href=&#34;https://jekyllrb.com&#34;&gt;jekyll&lt;/a&gt;에서 왔다는 결론에 이름. &lt;a href=&#34;https://jekyllrb.com&#34;&gt;jekyll&lt;/a&gt; 테스팅 시작!&lt;/p&gt;

&lt;p&gt;원조인 만큼 사용자가 많은 만큼 튜토리얼도 많고 설치에서 github에 deploy까지 순조롭게는 진행이 됨. 다 좋은데 문제는 ruby로 만들어졌다는게 맘에 안듬. 다른 PC에 설치할때마다 튜토리얼 따라해야 한다는게 까마득함..&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;마지막 선택 &lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Golang을 이용해 많은 프로젝트를 진행하진 않았지만 전에 회사에서 간단한 analytics 서버를 만든적도 있고 기회가 생길 때마다 끄적이고 있기에.. golang으로 만들어진 &lt;a href=&#34;https://gohugo.io&#34;&gt;hugo&lt;/a&gt;를 사용해보기로 함. 설치 아주 쉬움. 사용법 아주 쉬움. 몇 가지 문제라면 커뮤니티가 빈약하고&amp;hellip; 프로젝트 구조상 github에 deploy하는 과정이 쉽지 않음. (한번 개고생 하고 해보면 그다음 부터야 뭐. ㅎㅎㅎ)&lt;/p&gt;

&lt;p&gt;결국엔 내가 좋아하는 언어로 개발된 플랫폼을 선택한 느낌이 강하긴 포스팅을 하려면 각 PC에 직접 설치를 해줘야 하기에 설치가 쉽다는 것은 큰 장점이다. &lt;a href=&#34;https://jekyllrb.com&#34;&gt;jekyll&lt;/a&gt;이나. 다른 플랫폼도 커맨드 하나 때리면 다 되는 것처럼 나와있지만.. 실상은 그렇지 않다. 뭐 루비를 즐겨 사용하시는 분들이라면 문제가 없겠지만..&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>