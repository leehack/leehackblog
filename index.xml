<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>leehack&#39;s blog</title>
    <link>http://blog.leehack.com/</link>
    <description>Recent content on leehack&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 23 Nov 2015 12:56:25 -0500</lastBuildDate>
    <atom:link href="http://blog.leehack.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Gradle NDK Build Script Example</title>
      <link>http://blog.leehack.com/blog/2015/11/23/gradle-ndk-build-script-example/</link>
      <pubDate>Mon, 23 Nov 2015 12:56:25 -0500</pubDate>
      
      <guid>http://blog.leehack.com/blog/2015/11/23/gradle-ndk-build-script-example/</guid>
      <description>&lt;p&gt;With this sample, you&amp;rsquo;ll be able to build NDK from Android Studio.
Now the gradle-experimental plug-in supports dependency. The dependency part show you how to include prebuilt shared library.&lt;/p&gt;

&lt;p&gt;I put the prebuilt .so files into &lt;code&gt;/src/main/jniLibs&lt;/code&gt;. source codes are in &lt;code&gt;/src/main/jni&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The sample script is for android library project which will make &lt;code&gt;.aar&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath &#39;com.android.tools.build:gradle-experimental:0.4.0&#39;
    }
}

apply plugin: &#39;com.android.model.library&#39;
model {
    android {
        compileSdkVersion = 23
        buildToolsVersion = &amp;quot;23.0.2&amp;quot;
        defaultConfig.with {
            minSdkVersion.apiLevel = 19
            targetSdkVersion.apiLevel = 23
        }
    }

    compileOptions.with {
        sourceCompatibility=JavaVersion.VERSION_1_7
        targetCompatibility=JavaVersion.VERSION_1_7
    }

    android.ndk {
        moduleName = &amp;quot;libName&amp;quot;
        cppFlags.add(&amp;quot;-DANDROID_NDK&amp;quot;)
        cppFlags.add(&amp;quot;-fexceptions&amp;quot;)
        ldLibs.addAll([&amp;quot;android&amp;quot;, &amp;quot;log&amp;quot;, &amp;quot;GLESv2&amp;quot;, &amp;quot;dl&amp;quot;, &amp;quot;jnigraphics&amp;quot;, &amp;quot;z&amp;quot;])
        stl       = &amp;quot;stlport_static&amp;quot;
        abiFilters.add(&amp;quot;armeabi&amp;quot;)
        abiFilters.add(&amp;quot;armeabi-v7a&amp;quot;)
        abiFilters.add(&amp;quot;arm64-v8a&amp;quot;)
        abiFilters.add(&amp;quot;x86&amp;quot;)
        abiFilters.add(&amp;quot;x86_64&amp;quot;)
    }

    android.sources {
        main {
            jni {
                dependencies {
                    library file(&amp;quot;src/main/jniLibs/armeabi/prebuiltSharedlib.so&amp;quot;) abi &amp;quot;armeabi&amp;quot;                    library file(&amp;quot;src/main/jniLibs/armeabi-v7a/prebuiltSharedlib.so&amp;quot;) abi &amp;quot;armeabi-v7a&amp;quot;
                    library file(&amp;quot;src/main/jniLibs/arm64-v8a/prebuiltSharedlib.so&amp;quot;) abi &amp;quot;arm64-v8a&amp;quot;
                    library file(&amp;quot;src/main/jniLibs/x86_64/prebuiltSharedlib.so&amp;quot;) abi &amp;quot;x86_64&amp;quot;
                    library file(&amp;quot;src/main/jniLibs/x86/prebuiltSharedlib.so&amp;quot;) abi &amp;quot;x86&amp;quot;
                }
            }
        }
    }
}

dependencies {
    compile fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;])
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>블로그 플랫폼을 찾아서..</title>
      <link>http://blog.leehack.com/blog/2015/11/23/%EB%B8%94%EB%A1%9C%EA%B7%B8-%ED%94%8C%EB%9E%AB%ED%8F%BC%EC%9D%84-%EC%B0%BE%EC%95%84%EC%84%9C../</link>
      <pubDate>Mon, 23 Nov 2015 09:30:28 -0500</pubDate>
      
      <guid>http://blog.leehack.com/blog/2015/11/23/%EB%B8%94%EB%A1%9C%EA%B7%B8-%ED%94%8C%EB%9E%AB%ED%8F%BC%EC%9D%84-%EC%B0%BE%EC%95%84%EC%84%9C../</guid>
      <description>&lt;p&gt;블로깅을 열심히 하는 편은 아니지만 구글블로그를 만들어 놓고 가끔은 (겨우 포스팅 몇개지만..) 뭔가 남기고 싶을 때 들어가보곤 한다. 문제는 포스팅을 시도 할 때마다 견뎌내야만 하는 짜증스러운 에디터.. 가끔 관리를 하기때문에 중간에 테마라도 실수로 바꿔버리면 전에 설정해둔게 날아가버려 포스팅 글들이 엉망이 된다.. (대표적으로 코드 하이라이팅..)&lt;/p&gt;

&lt;p&gt;그래서 다른 블로그 플랫폼을 찾기 시작!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;조건&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Markdown을 지원할 것. (미적 감각도 없고 특히 위즈윅 에디터에 질림)&lt;/li&gt;
&lt;li&gt;버전관리가 될 것. (더 이상은 실수로 설정 뭔가를 날려먹고 싶지 않다)&lt;/li&gt;
&lt;li&gt;무료. (돈 내가면서까지 열심히 할 생각은 없음)&lt;/li&gt;
&lt;li&gt;내 개인 서버가 아니고 클라우드에 있을 것.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;일단 마크다운을 지원하는 호스팅 플랫폼들을 알아봄&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;www.wordpress.com&#34;&gt;Wordpress&lt;/a&gt; - 사실 제대로 확인은 안해봤지만.. 유명하긴 해도 좀 오래된 플랫폼이라 그닥 끌리지 않음.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;ghost.org&#34;&gt;Ghost&lt;/a&gt; - 좋아보였으나 무료가 아님.&lt;/p&gt;

&lt;p&gt;그리고 몇몇 호스팅 베이스 플랫폼들을 더 알아봤는데.. 결론은 다 별로 맘에 안듬.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;어디서 들어본건 있어서 Github에 static web hosting을 할 수있다는 것을 알고 있었기에 이걸 활용 할수있는 시스템을 알아보기 시작&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;예전에 nodejs를 건드려보면서 알게되었던 &lt;a href=&#34;http://haroopress.com&#34;&gt;haroopress&lt;/a&gt;를 먼저 테스트! 결과는 처참. 사이트에 나와있는 설명과는 달리 설치가 한방에 되지 않음. (아마도 튜토리얼은 맥베이스지만 난 리눅스를 사용해서 인 듯) 더 연구할 수도 있었지만 javascript를 별로 좋아하지 않기에.. 일단은.. 중단하기로 함.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://haroopress.com&#34;&gt;haroopress&lt;/a&gt;가 &lt;a href=&#34;http://octopress.org&#34;&gt;octopress&lt;/a&gt;를 nodejs버전으로 다시만든 국내판 같은 느낌고, &lt;a href=&#34;http://octopress.org&#34;&gt;octopress&lt;/a&gt;는 &lt;a href=&#34;https://jekyllrb.com&#34;&gt;jekyll&lt;/a&gt;에서 왔다는 결론에 이름. &lt;a href=&#34;https://jekyllrb.com&#34;&gt;jekyll&lt;/a&gt; 테스팅 시작!&lt;/p&gt;

&lt;p&gt;원조인 만큼 사용자가 많은 만큼 튜토리얼도 많고 설치에서 github에 deploy까지 순조롭게는 진행이 됨. 다 좋은데 문제는 ruby로 만들어졌다는게 맘에 안듬. 다른 PC에 설치할때마다 튜토리얼 따라해야 한다는게 까마득함..&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;마지막 선택 &lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Golang을 이용해 많은 프로젝트를 진행하진 않았지만 전에 회사에서 간단한 analytics 서버를 만든적도 있고 기회가 생길 때마다 끄적이고 있기에.. golang으로 만들어진 &lt;a href=&#34;https://gohugo.io&#34;&gt;hugo&lt;/a&gt;를 사용해보기로 함. 설치 아주 쉬움. 사용법 아주 쉬움. 몇 가지 문제라면 커뮤니티가 빈약하고&amp;hellip; 프로젝트 구조상 github에 deploy하는 과정이 쉽지 않음. (한번 개고생 하고 해보면 그다음 부터야 뭐. ㅎㅎㅎ)&lt;/p&gt;

&lt;p&gt;결국엔 내가 좋아하는 언어로 개발된 플랫폼을 선택한 느낌이 강하긴 포스팅을 하려면 각 PC에 직접 설치를 해줘야 하기에 설치가 쉽다는 것은 큰 장점이다. &lt;a href=&#34;https://jekyllrb.com&#34;&gt;jekyll&lt;/a&gt;이나. 다른 플랫폼도 커맨드 하나 때리면 다 되는 것처럼 나와있지만.. 실상은 그렇지 않다. 뭐 루비를 즐겨 사용하시는 분들이라면 문제가 없겠지만..&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>