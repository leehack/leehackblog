<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android on leehack&#39;s blog</title>
    <link>http://blog.leehack.com/categories/android/</link>
    <description>Recent content in Android on leehack&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 24 Nov 2015 18:56:44 -0500</lastBuildDate>
    <atom:link href="http://blog.leehack.com/categories/android/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How I debugged memory leak issue for mediaserver</title>
      <link>http://blog.leehack.com/blog/2015/11/24/how-i-debugged-memory-leak-issue-for-mediaserver/</link>
      <pubDate>Tue, 24 Nov 2015 18:56:44 -0500</pubDate>
      
      <guid>http://blog.leehack.com/blog/2015/11/24/how-i-debugged-memory-leak-issue-for-mediaserver/</guid>
      <description>&lt;p&gt;Recently I had to fix big memory leak issue in &amp;ldquo;medieaserver&amp;rdquo;. From the internet I found very nice tool called &lt;code&gt;addr2func&lt;/code&gt; for fixing the issue.&lt;/p&gt;

&lt;p&gt;The tool is written by &lt;a href=&#34;http://freepine.blogspot.ca/2010/02/analyze-memory-leak-of-android-native.html&#34;&gt;freepine&lt;/a&gt; and I modified for supporting latest version of AOSP bases codes(5.0) and uploaded into Github : &lt;a href=&#34;https://github.com/leehack/addr2func&#34;&gt;addr2func&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Pre-condition - eng or userdebug build of device and android full source code&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Download &lt;a href=&#34;https://raw.githubusercontent.com/leehack/addr2func/master/addr2func.py&#34;&gt;addr2func&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Give excute permission.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$chmod +x addr2func.py
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Enable memory allocation debug feature for &lt;code&gt;mediaserver&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$adb shell setprop libc.debug.malloc 1
$adb shell ps mediaserver
$adb shell kill &amp;lt;mediaserver_pid&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Dump memory status of &lt;code&gt;mediaserver&lt;/code&gt; into &lt;code&gt;dump1&lt;/code&gt; file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$adb shell ps mediaserver
$adb pull /proc/&amp;lt;mediaserver_pid&amp;gt;/maps
$adb shell dumpsys media.player -m &amp;gt; dump1
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Do the memory leak test on the device.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Dump memory status of &lt;code&gt;mediaserver&lt;/code&gt; into &lt;code&gt;dump2&lt;/code&gt; file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$adb pull /proc/&amp;lt;mediaserver_pid&amp;gt;/maps
$adb shell dumpsys media.player -m &amp;gt; dump2
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;make &lt;code&gt;diff&lt;/code&gt; between &lt;code&gt;dump1&lt;/code&gt; and &lt;code&gt;dump2&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$diff dump1 dump2 &amp;gt; diff
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Save memory allocation trace into &lt;code&gt;mem_trace&lt;/code&gt; file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$./addr2func.py --root-dir=&amp;lt;AOSP_dir&amp;gt; --maps-file=maps --product=&amp;lt;product_name_of_your_build&amp;gt; diff &amp;gt; mem_trace
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The memory allocation trace is saved in &lt;code&gt;mem_trace&lt;/code&gt; file. It will show you where exactly the memory is allocated. &lt;code&gt;dup&lt;/code&gt; is duplication count.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gradle NDK Build Script Example</title>
      <link>http://blog.leehack.com/blog/2015/11/23/gradle-ndk-build-script-example/</link>
      <pubDate>Mon, 23 Nov 2015 12:56:25 -0500</pubDate>
      
      <guid>http://blog.leehack.com/blog/2015/11/23/gradle-ndk-build-script-example/</guid>
      <description>&lt;p&gt;With this sample, you&amp;rsquo;ll be able to build NDK from Android Studio.
Now the gradle-experimental plug-in supports dependency. The dependency part show you how to include prebuilt shared library.&lt;/p&gt;

&lt;p&gt;I put the prebuilt .so files into &lt;code&gt;/src/main/jniLibs&lt;/code&gt;. source codes are in &lt;code&gt;/src/main/jni&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The sample script is for android library project which will make &lt;code&gt;.aar&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath &#39;com.android.tools.build:gradle-experimental:0.4.0&#39;
    }
}

apply plugin: &#39;com.android.model.library&#39;
model {
    android {
        compileSdkVersion = 23
        buildToolsVersion = &amp;quot;23.0.2&amp;quot;
        defaultConfig.with {
            minSdkVersion.apiLevel = 19
            targetSdkVersion.apiLevel = 23
        }
    }

    compileOptions.with {
        sourceCompatibility=JavaVersion.VERSION_1_7
        targetCompatibility=JavaVersion.VERSION_1_7
    }

    android.ndk {
        moduleName = &amp;quot;libName&amp;quot;
        cppFlags.add(&amp;quot;-DANDROID_NDK&amp;quot;)
        cppFlags.add(&amp;quot;-fexceptions&amp;quot;)
        ldLibs.addAll([&amp;quot;android&amp;quot;, &amp;quot;log&amp;quot;, &amp;quot;GLESv2&amp;quot;, &amp;quot;dl&amp;quot;, &amp;quot;jnigraphics&amp;quot;, &amp;quot;z&amp;quot;])
        stl       = &amp;quot;stlport_static&amp;quot;
        abiFilters.add(&amp;quot;armeabi&amp;quot;)
        abiFilters.add(&amp;quot;armeabi-v7a&amp;quot;)
        abiFilters.add(&amp;quot;arm64-v8a&amp;quot;)
        abiFilters.add(&amp;quot;x86&amp;quot;)
        abiFilters.add(&amp;quot;x86_64&amp;quot;)
    }

    android.sources {
        main {
            jni {
                dependencies {
                    library file(&amp;quot;src/main/jniLibs/armeabi/prebuiltSharedlib.so&amp;quot;) abi &amp;quot;armeabi&amp;quot;                    library file(&amp;quot;src/main/jniLibs/armeabi-v7a/prebuiltSharedlib.so&amp;quot;) abi &amp;quot;armeabi-v7a&amp;quot;
                    library file(&amp;quot;src/main/jniLibs/arm64-v8a/prebuiltSharedlib.so&amp;quot;) abi &amp;quot;arm64-v8a&amp;quot;
                    library file(&amp;quot;src/main/jniLibs/x86_64/prebuiltSharedlib.so&amp;quot;) abi &amp;quot;x86_64&amp;quot;
                    library file(&amp;quot;src/main/jniLibs/x86/prebuiltSharedlib.so&amp;quot;) abi &amp;quot;x86&amp;quot;
                }
            }
        }
    }
}

dependencies {
    compile fileTree(dir: &#39;libs&#39;, include: [&#39;*.jar&#39;])
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Android C2DM client 예제</title>
      <link>http://blog.leehack.com/blog/2011/12/09/android-c2dm-client-%EC%98%88%EC%A0%9C/</link>
      <pubDate>Fri, 09 Dec 2011 04:56:00 +0000</pubDate>
      
      <guid>http://blog.leehack.com/blog/2011/12/09/android-c2dm-client-%EC%98%88%EC%A0%9C/</guid>
      <description>&lt;p&gt;준비물 : c2dm account(&lt;a href=&#34;(/blog/2011/12/09/python으로-c2dm-server-만들기)&#34;&gt;파이썬으로 c2dm서버 만들기&lt;/a&gt; 포스팅 참조)&lt;/p&gt;

&lt;p&gt;만들 예제의 패키지 구조.&lt;br /&gt;
&lt;img src=&#34;http://4.bp.blogspot.com/-f9hw88JM4MU/TuHeizYCzYI/AAAAAAAADnE/_8JG2D4Tc50/s320/%25E1%2584%2589%25E1%2585%25B3%25E1%2584%258F%25E1%2585%25B3%25E1%2584%2585%25E1%2585%25B5%25E1%2586%25AB%25E1%2584%2589%25E1%2585%25A3%25E1%2586%25BA+2011-12-09+%25E1%2584%258B%25E1%2585%25A9%25E1%2584%2592%25E1%2585%25AE+7.10.00.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;우선 Manifest file의 Code.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;manifest android:versioncode=&amp;quot;1&amp;quot; android:versionname=&amp;quot;1.0&amp;quot; package=&amp;quot;com.leehack.c2dmtest&amp;quot; xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;&amp;gt;
    &amp;lt;uses-sdk android:minsdkversion=&amp;quot;14&amp;quot;&amp;gt;
        &amp;lt;application android:icon=&amp;quot;@drawable/ic_launcher&amp;quot; android:label=&amp;quot;@string/app_name&amp;quot;&amp;gt;
            &amp;lt;activity android:label=&amp;quot;@string/app_name&amp;quot; android:name=&amp;quot;.C2DM_TESTActivity&amp;quot;&amp;gt;
                &amp;lt;intent-filter&amp;gt;
                    &amp;lt;action android:name=&amp;quot;android.intent.action.MAIN&amp;quot;&amp;gt;
                        &amp;lt;category android:name=&amp;quot;android.intent.category.LAUNCHER&amp;quot;&amp;gt;&amp;lt;/category&amp;gt;
                    &amp;lt;/action&amp;gt;
                &amp;lt;/intent-filter&amp;gt;
            &amp;lt;/activity&amp;gt;
            
            &amp;lt;!-- Only C2DM servers can send messages for the app. If permission is not set - any other app can generate it --&amp;gt;
            &amp;lt;receiver android:name=&amp;quot;.push.C2DMReceiver&amp;quot; android:permission=&amp;quot;com.google.android.c2dm.permission.SEND&amp;quot;&amp;gt;
                &amp;lt;!-- Receive the actual message --&amp;gt;
                &amp;lt;intent-filter&amp;gt;
                    &amp;lt;action android:name=&amp;quot;com.google.android.c2dm.intent.RECEIVE&amp;quot;&amp;gt;
                        &amp;lt;category android:name=&amp;quot;com.leehack.c2dmtest&amp;quot;&amp;gt;&amp;lt;/category&amp;gt;
                    &amp;lt;/action&amp;gt;
                &amp;lt;/intent-filter&amp;gt;
                &amp;lt;!-- Receive the registration id --&amp;gt;
                &amp;lt;intent-filter&amp;gt;
                    &amp;lt;action android:name=&amp;quot;com.google.android.c2dm.intent.REGISTRATION&amp;quot;&amp;gt;
                        &amp;lt;category android:name=&amp;quot;com.leehack.c2dmtest&amp;quot;&amp;gt;
                        &amp;lt;/category&amp;gt;
                    &amp;lt;/action&amp;gt;
                &amp;lt;/intent-filter&amp;gt;
            &amp;lt;/receiver&amp;gt;
        &amp;lt;/application&amp;gt;
        &amp;lt;!-- Only this application can receive the messages and registration result --&amp;gt;
        &amp;lt;permission android:name=&amp;quot;com.leehack.c2dmtest.permission.C2D_MESSAGE&amp;quot; android:protectionlevel=&amp;quot;signature&amp;quot;&amp;gt;
            &amp;lt;uses-permission android:name=&amp;quot;com.leehack.c2dmtest.permission.C2D_MESSAGE&amp;quot;&amp;gt;&amp;lt;/uses-permission&amp;gt;
            &amp;lt;!-- This app has permission to register and receive message --&amp;gt;
            &amp;lt;uses-permission android:name=&amp;quot;com.google.android.c2dm.permission.RECEIVE&amp;quot;&amp;gt;&amp;lt;/uses-permission&amp;gt;
        &amp;lt;/permission&amp;gt;
    &amp;lt;/uses-sdk&amp;gt;
&amp;lt;/manifest&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;C2DMReceiver.java: 리시버 작성.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.leehack.c2dmtest.push;
import android.app.Activity;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.util.Log;
import android.view.Gravity;
import android.widget.Toast;
public class C2DMReceiver extends BroadcastReceiver
{
    static String registration_id = null;
    private Context mContext;
    @Override
    public void onReceive(Context context, Intent intent) {
        if (intent.getAction().equals(&amp;quot;com.google.android.c2dm.intent.REGISTRATION&amp;quot;)) {
            handleRegistration(context, intent);
        } else if (intent.getAction().equals(&amp;quot;com.google.android.c2dm.intent.RECEIVE&amp;quot;)) {
        	//서버에 등록이 되면 Registration_id를 C2DM서버에서 보내준다. 받은 이 ID를 별도로 구성한 서버에 보내야 한다.
            handleMessage(context, intent);
        }
    }
    private void handleRegistration(Context context, Intent intent) {
        String registration = intent.getStringExtra(&amp;quot;registration_id&amp;quot;);
        if (intent.getStringExtra(&amp;quot;error&amp;quot;) != null) {
        	// Registration failed, should try again later.
        } else if (intent.getStringExtra(&amp;quot;unregistered&amp;quot;) != null) {
            registration = null;
        } else if (registration != null) {
            registration_id = registration;
            mContext = context;
            SharedPreferences sp  = mContext.getSharedPreferences(&amp;quot;com.leehack.c2dmtest&amp;quot;, Activity.MODE_PRIVATE);
            SharedPreferences.Editor ed = sp.edit();
            ed.putString(&amp;quot;registration_id&amp;quot;, registration_id);
            ed.commit();
            Toast toast = Toast.makeText(context, &amp;quot;Registration Id\n&amp;quot; + registration_id, Toast.LENGTH_LONG);
            toast.setGravity(Gravity.TOP | Gravity.CENTER, 0, 150);
            toast.show();
            Log.d(&amp;quot;C2DMReceiver&amp;quot;, &amp;quot;c2dm registered&amp;quot;);
        }
    }
    //메세지가 도착하면 토스트로 도착한 메세지를 보여줌
    private void handleMessage(Context context, Intent intent) {
        String c2dm_msg = intent.getExtras().getString(&amp;quot;msg&amp;quot;);
        System.out.println(&amp;quot;c2dm_msg======&amp;gt;&amp;quot; + c2dm_msg);
        Toast toast = Toast.makeText(context, &amp;quot;c2dmMessage\n&amp;quot; + c2dm_msg, Toast.LENGTH_LONG);
        toast.setGravity(Gravity.TOP | Gravity.CENTER, 0, 150);
        toast.show();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;PushHelper.java: c2dm 서버에 Register/Unregister 메소드 작성.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.leehack.c2dmtest.push;
import android.app.Activity;
import android.app.PendingIntent;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
public class PushHelper {
	final static String c2dmDevId = &amp;quot;c2dm에 등록한 account&amp;quot;;
	public static void c2dmRegister(Context context){
		SharedPreferences sp  = context.getSharedPreferences(&amp;quot;com.leehack.c2dmtest&amp;quot;, Activity.MODE_PRIVATE);
		if(sp.getString(&amp;quot;registration_id&amp;quot;, null) != null)
			return;
		Intent registrationIntent = new Intent(
			&amp;quot;com.google.android.c2dm.intent.REGISTER&amp;quot;);
		registrationIntent.putExtra(&amp;quot;app&amp;quot;,
			PendingIntent.getBroadcast(context, 0, new Intent(), 0));
		registrationIntent.putExtra(&amp;quot;sender&amp;quot;, c2dmDevId);
		context.startService(registrationIntent);
	}
	public static void c2dmUnregister(Context context){
		Intent unregIntent = new Intent(&amp;quot;com.google.android.c2dm.intent.UNREGISTER&amp;quot;);
		unregIntent.putExtra(&amp;quot;app&amp;quot;, PendingIntent.getBroadcast(context, 0, new Intent(), 0));
		context.startService(unregIntent);
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;C2DM_TESTActivity.java: Register와 Unregister버튼의 동작을 정의&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package com.leehack.c2dmtest;
import android.app.Activity;
import android.os.Bundle;
import android.view.View;
import android.view.View.OnClickListener;
import com.leehack.c2dmtest.push.PushHelper;

public class C2DM_TESTActivity extends Activity {
	/** Called when the activity is first created. */
	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.main);
		findViewById(R.id.button1).setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
			// TODO Auto-generated method stub
			PushHelper.c2dmRegister(C2DM_TESTActivity.this);
			}
		});
		findViewById(R.id.button2).setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				PushHelper.c2dmUnregister(C2DM_TESTActivity.this);
			}
		});
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;앞으로 해야 할일!.&lt;br /&gt;
1. 구글의 C2DM과 통신한 Push Server 구성.&lt;br /&gt;
2. Register를 한 후 C2DMReceiver를 통해 C2DM 서버로 부터 전달받은 Registration_ID를 구성한 Push Server로 전달하는 로직 구성.&lt;br /&gt;
    (&lt;a href=&#34;(/blog/2011/12/09/python으로-c2dm-server-만들기)&#34;&gt;파이썬으로 c2dm서버 만들기&lt;/a&gt; 포스팅을 참조하면 1번은 해결될 것이고 2번만 추가로 구성하면 된다)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python으로 c2dm server 만들기</title>
      <link>http://blog.leehack.com/blog/2011/12/09/python%EC%9C%BC%EB%A1%9C-c2dm-server-%EB%A7%8C%EB%93%A4%EA%B8%B0/</link>
      <pubDate>Fri, 09 Dec 2011 04:25:00 +0000</pubDate>
      
      <guid>http://blog.leehack.com/blog/2011/12/09/python%EC%9C%BC%EB%A1%9C-c2dm-server-%EB%A7%8C%EB%93%A4%EA%B8%B0/</guid>
      <description>&lt;p&gt;1.&amp;nbsp;&lt;a href=&#34;http://code.google.com/intl/ko-KR/android/c2dm/&#34;&gt;http://code.google.com/intl/ko-KR/android/c2dm/&lt;/a&gt; 에서 c2dm 서비스에 sign-up&lt;br /&gt;(gmail account를 새로 만들어서 가입하는 것이 좋다. - 실제로 이 account정보를 클라이언트 및 서버에 모두 넣어야 하고 더구나 서버에는 패스워드정보도 필요하기 때문)&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://4.bp.blogspot.com/-HdKsVNq8U3Y/TuHWLJiuniI/AAAAAAAADm8/cOUAaTiV7_o/s1600/%25E1%2584%2589%25E1%2585%25B3%25E1%2584%258F%25E1%2585%25B3%25E1%2584%2585%25E1%2585%25B5%25E1%2586%25AB%25E1%2584%2589%25E1%2585%25A3%25E1%2586%25BA+2011-12-09+%25E1%2584%258B%25E1%2585%25A9%25E1%2584%2592%25E1%2585%25AE+6.33.53.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;336&#34; src=&#34;http://4.bp.blogspot.com/-HdKsVNq8U3Y/TuHWLJiuniI/AAAAAAAADm8/cOUAaTiV7_o/s640/%25E1%2584%2589%25E1%2585%25B3%25E1%2584%258F%25E1%2585%25B3%25E1%2584%2585%25E1%2585%25B5%25E1%2586%25AB%25E1%2584%2589%25E1%2585%25A3%25E1%2586%25BA+2011-12-09+%25E1%2584%258B%25E1%2585%25A9%25E1%2584%2592%25E1%2585%25AE+6.33.53.png&#34; width=&#34;640&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;2. 가입하면 E-mail로 가입한 Account로 서비스가 Enable되었다는 내용의 메일이 옮(보통 하루안에 오고 늦어도 몇일 사이에는 오는 듯)&lt;br /&gt;&lt;br /&gt;여기까지 준비 완료! 아래는 실제 파이썬 코드 시작!!&lt;br /&gt;&lt;br /&gt;&lt;pre class=&#34;brush:python&#34;&gt;import urllib, urllib2&lt;br /&gt;&lt;br /&gt;class ClientLoginTokenFactory(): &lt;br /&gt;    _token = None &lt;br /&gt;    &lt;br /&gt;    def &lt;strong&gt;init&lt;/strong&gt;(self):&lt;br /&gt;        self.url = &amp;lsquo;&lt;a href=&#34;https://www.google.com/accounts/ClientLogin&#39;&#34;&gt;https://www.google.com/accounts/ClientLogin&#39;&lt;/a&gt;&lt;br /&gt;        self.accountType = &amp;lsquo;GOOGLE&amp;rsquo;&lt;br /&gt;        self.email = &amp;lsquo;c2dm에 가입한 메일주소&amp;rsquo;&lt;br /&gt;        self.password = &amp;lsquo;c2dm에 가입한 메일주소의 패스워드&amp;rsquo;&lt;br /&gt;        self.source = &amp;lsquo;replstory-replstory-0&amp;rsquo;&lt;br /&gt;        self.service = &amp;lsquo;ac2dm&amp;rsquo;&lt;br /&gt;    &lt;br /&gt;    def getToken(self):    &lt;br /&gt;        if self._token is None:&lt;br /&gt;            &lt;br /&gt;            # Build payload&lt;br /&gt;            values = {&amp;lsquo;accountType&amp;rsquo; : self.accountType,&lt;br /&gt;                      &amp;lsquo;Email&amp;rsquo; : self.email,&lt;br /&gt;                      &amp;lsquo;Passwd&amp;rsquo; : self.password, &lt;br /&gt;                      &amp;lsquo;source&amp;rsquo; : self.source, &lt;br /&gt;                      &amp;lsquo;service&amp;rsquo; : self.service}&lt;br /&gt;            &lt;br /&gt;            # Build request&lt;br /&gt;            data = urllib.urlencode(values)&lt;br /&gt;            request = urllib2.Request(self.url, data)&lt;br /&gt;            &lt;br /&gt;            # Post&lt;br /&gt;            response = urllib2.urlopen(request)&lt;br /&gt;            responseAsString = response.read()&lt;br /&gt;            &lt;br /&gt;            # Format response&lt;br /&gt;            responseAsList = responseAsString.split(&amp;rsquo;\n&amp;rsquo;)&lt;br /&gt;            &lt;br /&gt;            self._token = responseAsList[2].split(&amp;lsquo;=&amp;rsquo;)[1]&lt;br /&gt;            &lt;br /&gt;        return self._token&lt;br /&gt;    &lt;br /&gt;class C2DM():&lt;br /&gt;    &lt;br /&gt;    def &lt;strong&gt;init&lt;/strong&gt;(self):&lt;br /&gt;        self.url = &amp;lsquo;&lt;a href=&#34;https://android.apis.google.com/c2dm/send&#39;&#34;&gt;https://android.apis.google.com/c2dm/send&#39;&lt;/a&gt;&lt;br /&gt;        self.clientAuth = None&lt;br /&gt;        self.registrationId = None&lt;br /&gt;        self.collapseKey = None&lt;br /&gt;        self.data = {}&lt;br /&gt;        &lt;br /&gt;    def sendMessage(self):&lt;br /&gt;        if self.registrationId == None or self.collapseKey == None:&lt;br /&gt;            return False&lt;br /&gt;        &lt;br /&gt;        clientAuthFactory = ClientLoginTokenFactory()&lt;br /&gt;        self.clientAuth = clientAuthFactory.getToken()&lt;br /&gt;        &lt;br /&gt;        # Build payload&lt;br /&gt;        values = {&amp;lsquo;registration_id&amp;rsquo; : self.registrationId,&lt;br /&gt;                  &amp;lsquo;collapse_key&amp;rsquo; : self.collapseKey}     &lt;br /&gt;        &lt;br /&gt;        # Loop over any data we want to send&lt;br /&gt;        for k, v in self.data.iteritems():            &lt;br /&gt;            values[&amp;lsquo;data.&amp;rsquo; + k] = v&lt;br /&gt;        &lt;br /&gt;        # Build request&lt;br /&gt;        headers = {&amp;lsquo;Authorization&amp;rsquo;: &amp;lsquo;GoogleLogin auth=&amp;rsquo; + self.clientAuth}        &lt;br /&gt;        data = urllib.urlencode(values)&lt;br /&gt;        request = urllib2.Request(self.url, data, headers)&lt;br /&gt;        &lt;br /&gt;        # Post&lt;br /&gt;        try:&lt;br /&gt;            response = urllib2.urlopen(request)&lt;br /&gt;            responseAsString = response.read()&lt;br /&gt;            &lt;br /&gt;            return responseAsString&lt;br /&gt;        except urllib2.HTTPError, e:&lt;br /&gt;            print &amp;lsquo;HTTPError &amp;rsquo; + str(e)&lt;br /&gt;            &lt;br /&gt;            &lt;br /&gt;sender = C2DM()&lt;br /&gt;sender.registrationId = &amp;lsquo;Android단말기에서 c2dm서버로 부터 받은 고유번호&amp;rsquo;&lt;br /&gt;sender.collapseKey = 1&lt;br /&gt;sender.data = {&amp;lsquo;msg&amp;rsquo;:&amp;lsquo;test&amp;rsquo;}&lt;br /&gt;response = sender.sendMessage()&lt;br /&gt;print response&lt;br /&gt;&lt;br /&gt;&lt;/pre&gt;9,10,79 라인의 정보만 바꾸고 실행하면 c2dm등록된 단말기로 test라는 푸시 메세지가 날아간다.&lt;br /&gt;&lt;a href=&#34;http://blog.boxedice.com/2010/10/07/android-push-notifications-tutorial/&#34;&gt;http://blog.boxedice.com/2010/10/07/android-push-notifications-tutorial/&lt;/a&gt;&amp;nbsp;에 있는 예제코드인데 제대로 돌지 않아서 약간의 수정만 했음.&lt;br /&gt;&lt;br /&gt;이미 눈치 채셨겠지만 실제 사용시에는 78라인부터만 따로 가져가서 원하는 곳에 사용하면 된다. collapseKey를 1로 고정해두고 사용하면 c2dm메세지가 동일한 단말에 동일한 메세지를 계속 적으로 보낼 경우 중간중간 빼먹는 경우가 생긴다. 구글에서 중복된 메세지 전송을 방지하게 넣어둔 코드임. 중복으로 보내는 메세지라도 단말에 꼭 전송이 되어야 하는 메세지라면 collapseKey를 increase하면서 보내는 것이 상책!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Android dips pixel 계산법</title>
      <link>http://blog.leehack.com/blog/2010/08/05/android-dips-pixel-%EA%B3%84%EC%82%B0%EB%B2%95/</link>
      <pubDate>Thu, 05 Aug 2010 02:25:00 +0000</pubDate>
      
      <guid>http://blog.leehack.com/blog/2010/08/05/android-dips-pixel-%EA%B3%84%EC%82%B0%EB%B2%95/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;스크린 사이즈&lt;br /&gt;&lt;br /&gt;QVGA(240x320), 120dpi : HTC Tatoo&lt;br /&gt;HVGA(320x480), 160dpi : 안드로원, HTC G1&lt;br /&gt;WVGA(480x800), 240dpi : 넥서스원, 갤럭시A&lt;br /&gt;FWVGA(480x854), 240dpi : 모토로이&lt;br /&gt;&lt;br /&gt;* 공식 :&amp;nbsp;&lt;span class=&#34;Apple-style-span&#34; style=&#34;color: #007000; font-family: monospace;&#34;&gt;pixels = dips * (density / 160)&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;Apple-style-span&#34; style=&#34;color: #007000; font-family: monospace;&#34;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&#34;Apple-style-span&#34; style=&#34;color: #007000; font-family: monospace;&#34;&gt;&lt;span class=&#34;Apple-style-span&#34; style=&#34;color: black; font-family: Gulim;&#34;&gt;* 참고 :&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;a href=&#34;http://developer.android.com/guide/practices/screens_support.html&#34;&gt;http://developer.android.com/guide/practices/screens_support.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Android ODEX Reverse Engineering(DE-ODEX)</title>
      <link>http://blog.leehack.com/blog/2010/06/09/android-odex-reverse-engineeringde-odex/</link>
      <pubDate>Wed, 09 Jun 2010 05:20:00 +0000</pubDate>
      
      <guid>http://blog.leehack.com/blog/2010/06/09/android-odex-reverse-engineeringde-odex/</guid>
      <description>&lt;p&gt;우선 ODEX라는 것이 무엇일까?&lt;br /&gt;&lt;a href=&#34;http://mylifewithandroid.blogspot.com/2009/02/optimized-dex-files.html&#34;&gt;http://mylifewithandroid.blogspot.com/2009/02/optimized-dex-files.html&lt;/a&gt;&lt;br /&gt;위 블로그에 보면 아주 내용이 잘 정리 되어있다. Optimized dex 로써 성능향상을 위해 Hardware에 최적화되어 만들어진 dex file이다. HTC의 단말기들에 있는 app들을 까보면 apk파일과 odex 파일 두개로 이루어져있다.&lt;br /&gt;(그리고 apk file을 압축을 풀어 확인해보면 classes.dex 파일이 존재 하지 않는다.)&lt;br /&gt;&lt;br /&gt;ODEX를 classes.dex로 바꿔보자!&lt;br /&gt;1.&amp;nbsp;&lt;a href=&#34;http://code.google.com/p/smali/downloads/list&#34;&gt;http://code.google.com/p/smali/downloads/list&lt;/a&gt;&amp;nbsp;사이트에서 smali.jar와 baksmali.jar를 다운로드한다.&lt;br /&gt;1. Android Phone을 Android SDK가 깔려있는 PC에 연결&lt;br /&gt;2. adb pull system system&lt;br /&gt;3. java -jar baksmali.jar -d system/framework -x temp.odex(odex파일 경로)&lt;br /&gt;(참조:&amp;nbsp;&lt;a href=&#34;http://code.google.com/p/smali/wiki/DeodexInstructions&#34;&gt;http://code.google.com/p/smali/wiki/DeodexInstructions&lt;/a&gt;)&lt;br /&gt;이렇게 하면 out이라는 폴더 안에 smali format으로 odex가 풀려있게 된다.&lt;br /&gt;4. java -jar smali.jar -o classes.dex out&lt;br /&gt;이렇게 해서 우리가 원하는 classes.dex 파일이 생성되었다.&lt;br /&gt;&lt;br /&gt;APK파일로&amp;hellip;&lt;br /&gt;classes.dex가 없는 apk 파일에 추가하여 다시 압축 한 후&amp;nbsp;&lt;a href=&#34;http://leehacks.blogspot.com/2010/05/android-apk-reverse-engineering.html&#34;&gt;http://leehacks.blogspot.com/2010/05/android-apk-reverse-engineering.html&lt;/a&gt;&amp;nbsp;포스팅에서 언급한 apktool로 다시한번 풀어줬다가 apk로 묶어주면 된다.&lt;br /&gt;물론 위 포스팅에서 언급한대로 sign도 해줘야 install이 가능하다.&lt;br /&gt;&lt;br /&gt;이렇게 해서 odexed된 app을 deodexing하여 원하는 Android Phone에 Install 할 수 있게 되었다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Android APK Reverse Engineering</title>
      <link>http://blog.leehack.com/blog/2010/05/14/android-apk-reverse-engineering/</link>
      <pubDate>Fri, 14 May 2010 00:44:00 +0000</pubDate>
      
      <guid>http://blog.leehack.com/blog/2010/05/14/android-apk-reverse-engineering/</guid>
      <description>&lt;p&gt;Android apk file을 reverse해서 Resource나 Src를 수정하는 방법이 있다.&lt;br /&gt;&lt;a href=&#34;http://code.google.com/p/android-apktool/&#34;&gt;http://code.google.com/p/android-apktool/&lt;/a&gt;&amp;nbsp;에 open source project가 진행중이며, apk를 풀고 다시 빌드하는 것이 가능하다.&lt;br /&gt;&lt;br /&gt;1. 해당 사이트에서 apktool을 다운로드하고 기재된 install방법으로 설치한다.&lt;br /&gt;2. apk 디코딩&lt;br /&gt;&amp;gt;apktool d -d name.apk out&lt;br /&gt;3. out 폴더에 있는 source file(dalvik bytecode)과 resource file을 수정한다.&lt;br /&gt;4. apk 빌드&lt;br /&gt;&amp;gt;apktool b -d out&lt;br /&gt;5. 위까지 수행하게 되면 out/dist/out.apk 가 생성되며 이 out.apk를 sign해주면 완료.&lt;br /&gt;&lt;br /&gt;Sign방법은&amp;nbsp;&lt;a href=&#34;http://developer.android.com/guide/publishing/app-signing.html&#34;&gt;http://developer.android.com/guide/publishing/app-signing.html&lt;/a&gt;&amp;nbsp;를 참고하면 된다.&lt;br /&gt;&lt;br /&gt;참고:&lt;br /&gt;1. leehack이 사용한 Sign관련 command.&lt;br /&gt;C:\Sun\SDK\jdk\bin\jarsigner -verbose -keystore E:\Works\Android\Android_2.1_Library\debug.keystore out.apk androiddebugkey&lt;br /&gt;password: android&lt;br /&gt;&lt;br /&gt;2. Dalvik Byte 코드에 관련된 문서.&lt;br /&gt;Dalvik opcode list:&amp;nbsp;&lt;a href=&#34;http://pallergabor.uw.hu/androidblog/dalvik_opcodes.html&#34;&gt;http://pallergabor.uw.hu/androidblog/dalvik_opcodes.html&lt;/a&gt;&lt;br /&gt;Dalvik bytecode?:&amp;nbsp;&lt;a href=&#34;http://pallergabor.uw.hu/common/understandingdalvikbytecode.pdf&#34;&gt;http://pallergabor.uw.hu/common/understandingdalvikbytecode.pdf&lt;/a&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>안드로이드 : 모토로라 드로이드로 24초만에 푼 큐빅</title>
      <link>http://blog.leehack.com/blog/2010/05/06/%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C--%EB%AA%A8%ED%86%A0%EB%A1%9C%EB%9D%BC-%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C%EB%A1%9C-24%EC%B4%88%EB%A7%8C%EC%97%90-%ED%91%BC-%ED%81%90%EB%B9%85/</link>
      <pubDate>Thu, 06 May 2010 02:44:00 +0000</pubDate>
      
      <guid>http://blog.leehack.com/blog/2010/05/06/%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C--%EB%AA%A8%ED%86%A0%EB%A1%9C%EB%9D%BC-%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C%EB%A1%9C-24%EC%B4%88%EB%A7%8C%EC%97%90-%ED%91%BC-%ED%81%90%EB%B9%85/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.androidpub.com/313753#6&#34;&gt;안드로이드펍 : 모토로라 드로이드로 24초만에 푼 큐빅&lt;/a&gt;&lt;br /&gt;&lt;object width=&#34;640&#34; height=&#34;385&#34;&gt;&lt;param name=&#34;movie&#34; value=&#34;http://www.youtube.com/v/0v8pJSGi4CA&amp;color1=0xb1b1b1&amp;color2=0xd0d0d0&amp;hl=ko_KR&amp;feature=player_embedded&amp;fs=1&#34;&gt;&lt;/param&gt;&lt;param name=&#34;allowFullScreen&#34; value=&#34;true&#34;&gt;&lt;/param&gt;&lt;param name=&#34;allowScriptAccess&#34; value=&#34;always&#34;&gt;&lt;/param&gt;&lt;embed src=&#34;http://www.youtube.com/v/0v8pJSGi4CA&amp;color1=0xb1b1b1&amp;color2=0xd0d0d0&amp;hl=ko_KR&amp;feature=player_embedded&amp;fs=1&#34; type=&#34;application/x-shockwave-flash&#34; allowfullscreen=&#34;true&#34; allowScriptAccess=&#34;always&#34; width=&#34;640&#34; height=&#34;385&#34;&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Get gmail data on Android</title>
      <link>http://blog.leehack.com/blog/2010/04/06/get-gmail-data-on-android/</link>
      <pubDate>Tue, 06 Apr 2010 21:39:00 +0000</pubDate>
      
      <guid>http://blog.leehack.com/blog/2010/04/06/get-gmail-data-on-android/</guid>
      <description>&lt;p&gt;ContentResolver contentResolver = getContentResolver();&lt;br /&gt;Cursor conversations = contentResolver.query(Uri.parse(&amp;ldquo;content://gmail-ls/conversations/&amp;rdquo;      + &amp;ldquo;leehack@gmail.com&amp;rdquo;), null, null, null, null);&lt;br /&gt;conversations.moveToFirst();&lt;br /&gt;for (int a = 0; a &amp;lt; conversations.getCount(); a++) {&lt;br /&gt;    String subject = conversations.getString(8);&lt;br /&gt;    conversations.moveToNext();&lt;br /&gt;}&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to create update.zip using your build aka system.img</title>
      <link>http://blog.leehack.com/blog/2010/03/02/how-to-create-update.zip-using-your-build-aka-system.img/</link>
      <pubDate>Tue, 02 Mar 2010 23:32:00 +0000</pubDate>
      
      <guid>http://blog.leehack.com/blog/2010/03/02/how-to-create-update.zip-using-your-build-aka-system.img/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://blog.coralic.nl/2010/01/25/how-to-create-update-zip-using-your-build-aka-system-img/&#34;&gt;How to create update.zip using your build aka system.img&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>